@using AlliancesPlugin;
@using AlliancesPlugin.Alliances;
@using Blazorise
@using Data;
@page "/alliances/edit/{Id:guid}"
@inject IJSRuntime JsRuntime
@inject TooltipService tooltipService

<PageTitle>Alliance Editor</PageTitle>
<div class="container-fluid">
       <RadzenCard>
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H4" TextAlign="TextAlign.Center">Run this command ingame to confirm changes</RadzenText>
        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" TextAlign="TextAlign.Center" contenteditable="false">!alliance acceptChanges @Id</RadzenText>
    </RadzenCard>
    <div class="row px-3">
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Alliance Name</RadzenText>
                <TextEdit @bind-Text="@alliance.name" MaskType="MaskType.RegEx" EditMask="[0-9a-zA-Z ]{3,25}$" Class="w-100" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Leader Title</RadzenText>
                                <TextEdit @bind-Text="@alliance.LeaderTitle" MaskType="MaskType.RegEx" EditMask="[0-9a-zA-Z ]{3,25}$" Class="w-100" />
              @*  <RadzenTextBox @bind-Value="@alliance.LeaderTitle" Class="w-100" />*@
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Leader Tax Rate</RadzenText>
                     <NumericPicker @bind-Value="@alliance.leadertax" Max="50" Min="0" Class="w-100"/>
             @*   <RadzenNumeric @bind-Value="@alliance.leadertax" Class="w-100" />*@
            </RadzenCard>
        </div>
    </div>
    <div class="row px-3">
        <div class="col-md-6 col-lg-12 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Description</RadzenText>
                <RadzenTextArea @bind-Value="@alliance.description" Class="w-100" />
            </RadzenCard>
        </div>
    </div>
    <div class="row px-3">
        <div class="col-md-6 col-lg-12 p-3">
            <RadzenButton Click=@(args => NewRank()) Icon="add" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Text="Add" />
            <RadzenButton Click=@(args => Undo()) Icon="undo" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Text="Undo Delete" />

            <DataGrid TItem="AlliancesPlugin.Alliances.RankPermissions"
                      Data="@alliance.CustomRankPermissions.Select(x => new RankPermissions(){
Key = x.Key,
RankName = x.Key,
permissions = x.Value.permissions,
permissionLevel = x.Value.permissionLevel,
taxRate = x.Value.taxRate
}).OrderByDescending(x => x.permissionLevel)"
                      EditMode="Blazorise.DataGrid.DataGridEditMode.Popup"
                      SelectionMode="Blazorise.DataGrid.DataGridSelectionMode.Single"
                      ShowPager="false"
                      ShowPageSizes="false"
                      Editable="true"
                      Responsive="true"
                      Sortable="true"
                      Striped="true"
                      PageSize="50"
                      CommandMode="DataGridCommandMode.Commands"
                      SubmitFormOnEnter="false"
                      Filterable="true" PopupSize="Blazorise.ModalSize.ExtraLarge" @ref="GridRef">
                <ChildContent>
                    <DataGridCommandColumn TItem="AlliancesPlugin.Alliances.RankPermissions" DeleteCommandAllowed="true">
                        <SaveCommandTemplate>
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="save" Click="@(args => { Updated(@context.Item); context.Clicked.InvokeAsync(); } )"></RadzenButton>
                        </SaveCommandTemplate>
                        <CancelCommandTemplate>
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="cancel" Click="@(args => context.Clicked.InvokeAsync())"></RadzenButton>
                        </CancelCommandTemplate>
                        <EditCommandTemplate>
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="edit" Click="@(args => context.Clicked.InvokeAsync())"></RadzenButton>
                        </EditCommandTemplate>
                        <DeleteCommandTemplate>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(args => Delete(@context.Item))"></RadzenButton>
                        </DeleteCommandTemplate>
                    </DataGridCommandColumn>
                    <DataGridColumn TItem="AlliancesPlugin.Alliances.RankPermissions" Field="RankName" Caption="Rank Name" Editable="true">
                        <EditTemplate>
                            <TextEdit Text="@((string)context.CellValue)" TextChanged="@(v => { context.CellValue = v ; context.Item.RankName = v;} )" MaskType="MaskType.RegEx" EditMask="[0-9a-zA-Z ]{3,25}$" ReadOnly="@(@context.Item.Key == " Unranked")" />
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="AlliancesPlugin.Alliances.RankPermissions" Field="taxRate" Caption="Tax Rate %" Editable="true">
                        <DisplayTemplate>
                            <p>@(@context.taxRate)%</p>
                        </DisplayTemplate>
                        <EditTemplate>
                            <NumericPicker TValue="float" Value="@((float)context.CellValue)" ValueChanged="@( v => { context.CellValue = v; } )" Max="50" Min="0">
                            </NumericPicker>
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="AlliancesPlugin.Alliances.RankPermissions" Field="permissionLevel" Caption="Permission Level" Editable="true" />
                    <DataGridColumn TItem="AlliancesPlugin.Alliances.RankPermissions" Field="permissions" Caption="Permissions" Editable="true" Displayable="false" Width="200%" PopupFieldColumnSize="@(Blazorise.ColumnSize.IsFull as Blazorise.IFluentColumn)">
                        <EditTemplate>
                            <div class="row px-3">
                                @foreach (var item in Permissions)
                                {
                                    <div class="col-md-12 col-lg-3 p-3">
                                        <RadzenCard>
                                            <RadzenCheckBox Value="@context.Item.permissions.Contains(item)" Name="@item.ToString()" TValue="bool" Change=@(args => OnChange(args, item, context)) />
                                            <RadzenLabel Text="@item.ToString()" Component="@item.ToString()" Style="margin-left: 8px; vertical-align: middle;" />
                                        </RadzenCard>
                                    </div>
                                }
                            </div>
                        </EditTemplate>
                    </DataGridColumn>
                </ChildContent>
            </DataGrid>

        </div>
    </div>
</div>
<RadzenButton Click=@(args => Clicked()) Text="Save" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" />
@code {
    List<AlliancesPlugin.Alliances.AccessLevel> Permissions = new List<AlliancesPlugin.Alliances.AccessLevel>();

    public async Task Clicked(){
        dataService.SaveChanges(Id, alliance);
    }

    public async Task Updated(RankPermissions rank)
    {
        if (rank.Key == "Unranked")
        {
            rank.RankName = "Unranked";
        }
        while (rank.taxRate > 1)
        {
            rank.taxRate /= 100;
        }
        if (alliance.CustomRankPermissions.ContainsKey(rank.Key) && rank.Key != rank.RankName)
        {
            alliance.CustomRankPermissions.Remove(rank.Key);
            rank.Key = rank.RankName;
            alliance.CustomRankPermissions.Add(rank.RankName, rank);
        }
        else
        {
            alliance.CustomRankPermissions.Remove(rank.Key);
            rank.Key = rank.RankName;
            alliance.CustomRankPermissions.Add(rank.RankName, rank);
        }
        await GridRef.Reload();
        return;
    }

    public Stack<RankPermissions> Deletes = new Stack<RankPermissions>();

    public async Task NewRank()
    {
        var newRank = new RankPermissions()
            {
                RankName = $"new{NewCount}",
                permissions = new List<AlliancesPlugin.Alliances.AccessLevel>(),
                Key = $"new{NewCount}",
                taxRate = 0f,
                permissionLevel = 100
            };
        alliance.CustomRankPermissions.Add($"new{NewCount}", newRank);
        NewCount++;
        GridRef.ClearFilter();
        await InvokeAsync(StateHasChanged);
    }

    public void Undo()
    {
        if (Deletes.TryPop(out RankPermissions rank))
        {
            if (alliance.CustomRankPermissions.ContainsKey(rank.Key))
            {
                alliance.CustomRankPermissions[rank.Key] = rank;
            }
            else
            {
                alliance.CustomRankPermissions.Add(rank.Key, rank);
            }
            GridRef.ClearFilter();
        }
    }

    public async Task Delete(AlliancesPlugin.Alliances.RankPermissions rank)
    {
        if (rank.Key == "Unranked")
        {
            await JsRuntime.InvokeAsync<bool>("Error", "You cannot delete the unranked.");
            return;
        }
        var confirmDelete = await JsRuntime.InvokeAsync<bool>("confirm", "Do you want to delete it?");
        if (confirmDelete)
        {
            Deletes.Push(rank);
            alliance.CustomRankPermissions.Remove(rank.Key);
            await GridRef.ClearFilter();
        }
    }

    public DataGrid<AlliancesPlugin.Alliances.RankPermissions> GridRef { get; set; }

    public int NewCount = 1;

    [Parameter]
    public Guid Id { get; set; }

    public AlliancesPlugin.Alliances.Alliance alliance { get; set; }

    public RadzenDataGrid<AlliancesPlugin.Alliances.RankPermissions> Grid { get; set; }

    void OnChange(bool? value, AlliancesPlugin.Alliances.AccessLevel level, CellEditContext<AlliancesPlugin.Alliances.RankPermissions> cell)
    {
        if (cell.Item.permissions.Contains(level))
        {
            cell.Item.permissions.Remove(level);
        }
        else
        {
            cell.Item.permissions.Add(level);
        }

    }

    [Inject]
    private DataService dataService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var temp = dataService.GetPackage(Id);
        alliance = temp.AllianceData;
        Permissions.Clear();
        var perms = Enum.GetValues(typeof(AlliancesPlugin.Alliances.AccessLevel));
        foreach (AlliancesPlugin.Alliances.AccessLevel perm in perms)
        {
            Permissions.Add(perm);
        }

        return;
    }
}
