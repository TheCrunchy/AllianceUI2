@using Blazorise;
@using Data;
@using AllianceUI2.Models;
@page "/alliances/edit/{Id:guid}"
@inject IJSRuntime JsRuntime
@inject TooltipService tooltipService

@if (@HasData)
{
    @if (DateTime.Now >= package.ExpiresAt)
    {
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H4" TextAlign="TextAlign.Center">Session has expired</RadzenText>
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" TextAlign="TextAlign.Center" contenteditable="false">To start a new session, Use the edit command ingame.</RadzenText>
        </RadzenCard>
    }
    else
    {
        <PageTitle>Alliance Editor</PageTitle>
        <div class="container-fluid">
            <RadzenCard>
                SHIPYARD FEE
                CHECK OTHER ALLIANCE NAMES BEFORE ACCEPTING EDITS ON THE SERVER
                CHANGE LEADER
                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" TextAlign="TextAlign.Center">Run this command ingame to confirm changes</RadzenText>
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H6" TextAlign="TextAlign.Center" contenteditable="false">!alliance accept</RadzenText>
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H6" TextAlign="TextAlign.Center" contenteditable="false">Session Expires in</RadzenText>
                <CountdownComponent EndTime="@package.ExpiresAt"></CountdownComponent>
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H6" TextAlign="TextAlign.Center" contenteditable="false">          <RadzenButton Click=@(args => Clicked()) Text="Save" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Large" /></RadzenText>

            </RadzenCard>
            <div class="row px-3">
                <div class="col-md-6 col-lg-4 p-3">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Alliance Name</RadzenText>
                        <TextEdit @bind-Text="@alliance.name" MaskType="MaskType.RegEx" EditMask="[0-9a-zA-Z]{0,50}$" Class="w-100" />
                    </RadzenCard>
                </div>
                <div class="col-md-6 col-lg-4 p-3">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Leader Title</RadzenText>
                        <TextEdit @bind-Text="@alliance.LeaderTitle" MaskType="MaskType.RegEx" EditMask="[0-9a-zA-Z ]{0,50}$" Class="w-100" />
                        @*  <RadzenTextBox @bind-Value="@alliance.LeaderTitle" Class="w-100" />*@
                    </RadzenCard>
                </div>
                <div class="col-md-6 col-lg-4 p-3">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Leader Tax Rate</RadzenText>
                        <NumericPicker @bind-Value="@alliance.leadertax" Max="50" Min="0" Class="w-100" />
                        @*   <RadzenNumeric @bind-Value="@alliance.leadertax" Class="w-100" />*@
                    </RadzenCard>
                </div>
            </div>
            <div class="row px-3">
                   <div class="col-md-6 col-lg-4 p-3">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Alliance Leader</RadzenText>
                        <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                                        Data=@(package.SteamIdsAndNames.Select(x => new RankItem(){PlayerName = x.Value, SteamId = x.Key}).ToList().OrderByDescending(x => x.PlayerName)) TextProperty="PlayerName" ValueProperty="SteamId"
                                                        Change=@(args => LeaderChanged(args)) Value="@alliance.SupremeLeader" />
                    </RadzenCard>
                </div>

                <div class="col-md-6 col-lg-4 p-3">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Chat Color Picker</RadzenText>
                        <RadzenColorPicker @bind-Value="@color" ShowHSV="true" ShowRGBA="true" ShowColors="true" Change=@(args => @ColorChange()) />

                        @*   <RadzenNumeric @bind-Value="@alliance.leadertax" Class="w-100" />*@
                    </RadzenCard>
                </div>
                <div class="col-md-6 col-lg-4 p-3">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Shipyard Fee</RadzenText>
                        <NumericPicker @bind-Value="@alliance.ShipyardFee" Min="0" />
                    </RadzenCard>
                </div>

                     <div class="col-md-6 col-lg-12 p-3">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H4">Description</RadzenText>
                        <TextEdit @bind-Value="@alliance.description" Class="w-100" MaskType="MaskType.RegEx" EditMask="[0-9a-zA-Z ]{0,2000}$" />

                    </RadzenCard>

                </div>
            </div>
            <div class="row px-3">
                <div class="col-md-6 col-lg-12 p-3">
                    <RadzenButton Click=@(args => NewRank()) Icon="add" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Text="Add" />

                    <RadzenAccordion Multiple="true">
                        <Items>
                            <RadzenAccordionItem Text="Ranks" Icon="military_tech" Selected="true">


                                <DataGrid TItem="RankPermissions"
                                  Data="@alliance.CustomRankPermissions.Select(x => new RankPermissions(){
Key = x.Key,
RankName = x.Key,
permissions = x.Value.permissions,
permissionLevel = x.Value.permissionLevel,
taxRate = x.Value.taxRate
}).OrderByDescending(x => x.permissionLevel)"
                                  EditMode="Blazorise.DataGrid.DataGridEditMode.Popup"
                                  SelectionMode="Blazorise.DataGrid.DataGridSelectionMode.Single"
                                  ShowPager="false"
                                  ShowPageSizes="false"
                                  Editable="true"
                                  Responsive="true"
                                  Sortable="true"
                                  Striped="true"
                                  PageSize="50"
                                  CommandMode="DataGridCommandMode.Commands"
                                  SubmitFormOnEnter="false"
                                  Filterable="true" PopupSize="Blazorise.ModalSize.ExtraLarge" @ref="GridRef">
                                    <ChildContent>
                                        <DataGridCommandColumn TItem="RankPermissions" DeleteCommandAllowed="true">
                                            <SaveCommandTemplate>
                                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="save" Click="@(args => { Updated(@context.Item); context.Clicked.InvokeAsync(); } )"></RadzenButton>
                                            </SaveCommandTemplate>
                                            <NewCommandTemplate>

                                            </NewCommandTemplate>
                                            <CancelCommandTemplate>
                                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="cancel" Click="@(args => context.Clicked.InvokeAsync())"></RadzenButton>
                                            </CancelCommandTemplate>
                                            <EditCommandTemplate>
                                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="edit" Click="@(args => context.Clicked.InvokeAsync())"></RadzenButton>
                                            </EditCommandTemplate>
                                            <DeleteCommandTemplate>
                                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(args => Delete(@context.Item))"></RadzenButton>
                                            </DeleteCommandTemplate>
                                        </DataGridCommandColumn>
                                        <DataGridColumn TItem="RankPermissions" Field="RankName" Caption="Rank Name" Editable="true">
                                            <EditTemplate>
                                                <TextEdit Text="@((string)context.CellValue)" TextChanged="@(v => { context.CellValue = v ; context.Item.RankName = v;} )" MaskType="MaskType.RegEx" EditMask="[0-9a-zA-Z ]{0,25}$" ReadOnly="@(@context.Item.Key == " Unranked")" />
                                            </EditTemplate>
                                        </DataGridColumn>
                                        <DataGridColumn TItem="RankPermissions" Field="taxRate" Caption="Tax Rate %" Editable="true">
                                            <DisplayTemplate>
                                                <p>@(@context.taxRate)%</p>
                                            </DisplayTemplate>
                                            <EditTemplate>
                                                <NumericPicker TValue="float" Value="@((float)context.CellValue)" ValueChanged="@( v => { context.CellValue = v; } )" Max="50" Min="0">
                                                </NumericPicker>
                                            </EditTemplate>
                                        </DataGridColumn>
                                        <DataGridColumn TItem="RankPermissions" Field="permissionLevel" Caption="Permission Level" Editable="true" />
                                        <DataGridColumn TItem="RankPermissions" Field="permissions" Caption="Permissions" Editable="true" Displayable="false" Width="200%" PopupFieldColumnSize="@(Blazorise.ColumnSize.IsFull as Blazorise.IFluentColumn)">
                                            <EditTemplate>
                                                <div class="row px-3">
                                                    @foreach (var item in Permissions)
                                                    {
                                                        <div class="col-md-12 col-lg-3 p-3">
                                                            <RadzenCard>
                                                                <RadzenCheckBox Value="@context.Item.permissions.Contains(item)" Name="@item.ToString()" TValue="bool" Change=@(args => OnChange(args, item, context)) />
                                                                <RadzenLabel Text="@item.ToString()" Component="@item.ToString()" Style="margin-left: 8px; vertical-align: middle;" />
                                                            </RadzenCard>
                                                        </div>
                                                    }
                                                </div>
                                            </EditTemplate>
                                        </DataGridColumn>
                                    </ChildContent>
                                </DataGrid>

                            </RadzenAccordionItem>
                            <RadzenAccordionItem Text="Player Ranks" Icon="groups" Selected="true">
                                <DataGrid TItem="RankItem"
                                  Data="@package.SteamIdsAndNames.Select(x => new RankItem(){ SteamId = x.Key, PlayerName = x.Value}).ToList()"
                                  EditMode="Blazorise.DataGrid.DataGridEditMode.Popup"
                                  SelectionMode="Blazorise.DataGrid.DataGridSelectionMode.Single"
                                  ShowPager="false"
                                  ShowPageSizes="false"
                                  Editable="true"
                                  Responsive="true"
                                  Sortable="true"
                                  Striped="true"
                                  PageSize="50"
                                  CommandMode="DataGridCommandMode.Commands"
                                  SubmitFormOnEnter="false"
                                  Filterable="true" PopupSize="Blazorise.ModalSize.ExtraLarge">
                                    <ChildContent>
                                        <DataGridCommandColumn TItem="RankItem" DeleteCommandAllowed="true">
                                            <CancelCommandTemplate>
                                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="cancel" Click="@(args => context.Clicked.InvokeAsync())"></RadzenButton>
                                            </CancelCommandTemplate>
                                            <SaveCommandTemplate>
                                            </SaveCommandTemplate>
                                            <NewCommandTemplate>
                                            </NewCommandTemplate>
                                            <EditCommandTemplate>
                                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="edit" Click="@(args => context.Clicked.InvokeAsync())"></RadzenButton>
                                            </EditCommandTemplate>
                                            <DeleteCommandTemplate>
                                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(args => alliance.PlayersCustomRank.Remove(context.Item.SteamId))"></RadzenButton>
                                            </DeleteCommandTemplate>
                                        </DataGridCommandColumn>

                                        <DataGridColumn TItem="RankItem" Field="PlayerName" Caption="Player Name" Editable="false">
                                        </DataGridColumn>
                                        <DataGridColumn TItem="RankItem" Field="SteamId" Caption="Steam Id" Editable="false">
                                        </DataGridColumn>
                                        <DataGridColumn TItem="RankItem" Caption="Rank" Editable="true">
                                            <DisplayTemplate>
                                                @if (@alliance.PlayersCustomRank.TryGetValue(@context.SteamId, out var rank))
                                                {
                                                    <p>@rank</p>
                                                }
                                                else
                                                {
                                                    <p>Unranked</p>
                                                }
                                            </DisplayTemplate>
                                            <EditTemplate>
                                                @{
                                                    var rank = "Unranked";
                                                    @if (@alliance.PlayersCustomRank.TryGetValue(@context.Item.SteamId, out var rank2))
                                                    {
                                                        rank = rank2;
                                                    }
                                                    <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                                        Data=@(alliance.CustomRankPermissions.OrderByDescending(x => x.Value.permissionLevel).Select(x => x.Key).Distinct())
                                                        Change=@(args => RankChange(@context.Item.SteamId, args.ToString())) Value="@rank" />
                                                }
                                            </EditTemplate>
                                        </DataGridColumn>
                                    </ChildContent>
                                </DataGrid>
                            </RadzenAccordionItem>
                        </Items>
                    </RadzenAccordion>
                </div>
            </div>
        </div>

    }
}
else
{
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H4" TextAlign="TextAlign.Center">Not Found</RadzenText>
        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" TextAlign="TextAlign.Center" contenteditable="false">Data not found. Use the edit command ingame.</RadzenText>
    </RadzenCard>
}


@code {
    List<AccessLevel> Permissions = new List<AccessLevel>();

    public bool collapse1Visible = true;
    public bool collapse2Visible = true;

    public async Task LeaderChanged(Object item){
        return;
    }

    public async Task ColorChange()
    {

        var temp = color.Replace("rgb(", "").Replace(")", "").Replace(" ", "");
        var split = temp.Split(",");

        alliance.r = int.Parse(split[0]);
        alliance.g = int.Parse(split[1]);
        alliance.b = int.Parse(split[2]);

        return;
    }

    public string color { get; set; }

    public async Task RankChange(ulong steamid, string newRank)
    {
        alliance.PlayersCustomRank.Remove(steamid);
        if (newRank is not "Unranked")
        {
            alliance.PlayersCustomRank.Add(steamid, newRank);
        }
        return;
    }

    public class RankItem
    {
        public string PlayerName { get; set; }
        public ulong SteamId { get; set; }
    }

    public async Task Clicked()
    {
        dataService.SaveChanges(Id, alliance);
        var confirmDelete = await JsRuntime.InvokeAsync<bool>("confirm", "Saving successful! Run the !alliance accept command to apply changes.");
    }

    public bool HasData = false;

    public async Task Updated(RankPermissions rank)
    {
        if (rank.Key == "Unranked")
        {
            rank.RankName = "Unranked";
        }
        while (rank.taxRate > 1)
        {
            rank.taxRate /= 100;
        }
        if (rank.Key != rank.RankName)
        {
            var updateThese = alliance.PlayersCustomRank.Where(x => x.Value == rank.Key);
            @foreach (var item in updateThese)
            {
                alliance.PlayersCustomRank[item.Key] = rank.RankName;
            }
        }
        if (alliance.CustomRankPermissions.ContainsKey(rank.Key) && rank.Key != rank.RankName)
        {
            alliance.CustomRankPermissions.Remove(rank.Key);
            alliance.CustomRankPermissions.Remove(rank.RankName);
            rank.Key = rank.RankName;
            alliance.CustomRankPermissions.Add(rank.RankName, rank);
        }
        else
        {
            alliance.CustomRankPermissions.Remove(rank.Key);
            rank.Key = rank.RankName;
            alliance.CustomRankPermissions.Add(rank.RankName, rank);
        }
        await GridRef.Reload();
        return;
    }

    public Stack<RankPermissions> Deletes = new Stack<RankPermissions>();

    public async Task NewRank()
    {
        while (alliance.CustomRankPermissions.ContainsKey($"new{NewCount}"))
        {
            NewCount += 1;
        }

        var newRank = new RankPermissions()
            {
                RankName = $"new{NewCount}",
                permissions = new List<AccessLevel>(),
                Key = $"new{NewCount}",
                taxRate = 0f,
                permissionLevel = 100
            };
        alliance.CustomRankPermissions.Add($"new{NewCount}", newRank);
        NewCount++;
        GridRef.ClearFilter();
        await InvokeAsync(StateHasChanged);
    }

    public void Undo()
    {
        if (Deletes.TryPop(out RankPermissions rank))
        {
            if (alliance.CustomRankPermissions.ContainsKey(rank.Key))
            {
                alliance.CustomRankPermissions[rank.Key] = rank;
            }
            else
            {
                alliance.CustomRankPermissions.Add(rank.Key, rank);
            }
            GridRef.ClearFilter();
        }
    }

    public async Task Delete(RankPermissions rank)
    {
        if (rank.Key == "Unranked")
        {
            await JsRuntime.InvokeAsync<bool>("Error", "You cannot delete the unranked.");
            return;
        }
        var confirmDelete = await JsRuntime.InvokeAsync<bool>("confirm", "Do you want to delete it?");
        if (confirmDelete)
        {
            Deletes.Push(rank);
            var unrankThese = alliance.PlayersCustomRank.Where(x => x.Value == rank.Key);
            @foreach (var item in unrankThese)
            {
                alliance.PlayersCustomRank.Remove(item.Key);
            }

            alliance.CustomRankPermissions.Remove(rank.Key);
            await GridRef.ClearFilter();
        }
    }

    public DataGrid<RankPermissions> GridRef { get; set; }

    public int NewCount = 1;

    [Parameter]
    public Guid Id { get; set; }

    public Alliance alliance { get; set; }
    public AlliancePackage package { get; set; }

    public RadzenDataGrid<RankPermissions> Grid { get; set; }

    void OnChange(bool? value, AccessLevel level, CellEditContext<RankPermissions> cell)
    {
        if (cell.Item.permissions.Contains(level))
        {
            cell.Item.permissions.Remove(level);
        }
        else
        {
            cell.Item.permissions.Add(level);
        }

    }

    [Inject]
    private DataService dataService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var temp = dataService.GetPackage(Id);
        if (temp != null)
        {
            alliance = temp.AllianceData;
            package = temp;
            Permissions.Clear();
            var perms = Enum.GetValues(typeof(AccessLevel));
            foreach (AccessLevel perm in perms)
            {
                Permissions.Add(perm);
            }
            HasData = true;
            color = $"rgb({alliance.r}, {alliance.g}, {alliance.b})";
        }
        else
        {
            HasData = false;
        }

        return;
    }
}
