<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sandbox.Common</name>
    </assembly>
    <members>
        <member name="T:Sandbox.ModAPI.IMyAdvancedDoor">
            <summary>
            Describes advanced door block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyAirtightDoorBase">
            <summary>
            Describes airtight door block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyAirtightHangarDoor">
            <summary>
            Describes hangar door block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyAirtightSlideDoor">
            <summary>
            Describes air tight slide block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyAssembler">
            <summary>
            Describes assembler block (PB scripting interface)
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyAssembler.CurrentProgressChanged">
            <summary>
            Called when the current item build progress changes.
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyAssembler.CurrentStateChanged">
            <summary>
            Called when the state of the assembler changes.
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyAssembler.CurrentModeChanged">
            <summary>
            Called when the build mode changes.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyAttachableTopBlock">
            <summary>
            Describes rotor,piston or wheel suspension attachable block (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyAttachableTopBlock.Base">
            <summary>
            Gets the attached base block
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyBatteryBlock">
            <summary>
            Describes battery block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyBeacon">
            <summary>
            Describes beacon block interface
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyBlockGroup">
            <summary>
            Describes terminal block group (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyBlockGroup.GetBlocks(System.Collections.Generic.List{Sandbox.ModAPI.IMyTerminalBlock},System.Func{Sandbox.ModAPI.IMyTerminalBlock,System.Boolean})">
            <summary>
            Get terminal blocks which assigned to this group
            </summary>
            <param name="blocks">buffer array</param>
            <param name="collect">if function returns true, block would be added to <paramref name="blocks"/></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyBlockGroup.GetBlocksOfType``1(System.Collections.Generic.List{Sandbox.ModAPI.IMyTerminalBlock},System.Func{Sandbox.ModAPI.IMyTerminalBlock,System.Boolean})">
            <summary>
            Get terminal blocks which assigned to this group, and matching type 
            </summary>
            <typeparam name="T">Block must be assignable from T</typeparam>
            <param name="blocks">buffer array</param>
            <param name="collect">if function returns true, block would be added to <paramref name="blocks"/></param>
            <exception cref="T:System.NullReferenceException">If function <paramref name="collect"/> returns true, and <paramref name="blocks"/> is null</exception>
        </member>
        <member name="T:Sandbox.ModAPI.IMyCameraBlock">
            <summary>
            Describes Camera block (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyCameraBlock.IsActiveLocal">
            <summary>
            Gets whether this camera is in use locally by the <i>current</i> player.
            To determine if <i>any</i> player is controlling the camera, instead use <see cref="P:Sandbox.ModAPI.Ingame.IMyCameraBlock.IsActive"/>.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyCargoContainer">
            <summary>
            Describes Cargo Container block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyCockpit">
            <summary>
            Describes cockpit block (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyCockpit.OxygenFilledRatio">
            <summary>
            Gets or sets the current oxygen level of this cockpit, as a value between 0 (empty) and 1 (full).
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyCockpit.AttachPilot(VRage.Game.ModAPI.IMyCharacter)">
            <summary>
            Place a pilot in the cockpit seat.
            </summary>
            <param name="pilot">Character to place in seat</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyCockpit.RemovePilot">
            <summary>
            Removes an attached pilot. Call on server.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyCollector">
            <summary>
            Describes collector block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyConveyor">
            <summary>
            Describes conveyor block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyConveyorSorter">
            <summary>
            Describes conveyor sorter block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyConveyorTube">
            <summary>
            Describes conveyor tube block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyCryoChamber">
            <summary>
            Describes cryo chamber block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyDecoy">
            <summary>
            Describes decoy block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyDoor">
            <summary>
            Describes door block (mods interface)
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyDoor.DoorStateChanged">
            <summary>
            Called when door changes state 
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyDoor.OnDoorStateChanged">
            <summary>
            Called when door changes opened state 
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyDoor.IsFullyClosed">
            <summary>
            Returns whether door is fully closed. (Animations are stopped)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyExhaustBlock">
            <summary>
            Describes exhaust block (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyExhaustBlock.SelectEffect(System.String)">
            <summary>
            Selects exhaust effect
            </summary>
            <param name="name">Name of effect</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyExhaustBlock.StopEffects">
            <summary>
            Stop emitting effects 
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyExhaustBlock.StartEffects">
            <summary>
            Start emitting effects
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyExtendedPistonBase">
            <summary>
            Describes piston block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyFunctionalBlock">
            <summary>
            Describes functional block (block with Enabled/Disabled toggle) (mods interface)
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyFunctionalBlock.EnabledChanged">
            <summary>
            Called when Enabled changed
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyFunctionalBlock.GetFramesFromLastTrigger">
            <summary>
            Gets number of frames from the last trigger of the update timer
            </summary>
            <returns>number of frames</returns>
        </member>
        <member name="E:Sandbox.ModAPI.IMyFunctionalBlock.UpdateTimerTriggered">
            <summary>
            Triggered when update timer ticks, event is fired after the block does all gameplay stuff
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyFunctionalBlock.IsUpdateTimerCreated">
            <summary>
            Returns true if timer was created. If the block does not use timer, this will be false.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyFunctionalBlock.IsUpdateTimerEnabled">
            <summary>
            Returns true if timer is enabled and ticking.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyGridProgram">
            <summary>
            The interface for the grid program provides extra access for the game and for mods. See <see cref="T:Sandbox.ModAPI.Ingame.MyGridProgram"/> for the class the scripts
            actually derive from.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.IGC_ContextGetter">
            <summary>
            Sets provider for <see cref="T:Sandbox.ModAPI.Ingame.IMyIntergridCommunicationSystem"/>
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.GridTerminalSystem">
            <summary>
            Gets or sets the GridTerminalSystem available for the grid programs.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.Me">
            <summary>
            Gets or sets the programmable block which is currently running this grid program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.Storage">
            <summary>
            Gets or sets the storage string for this grid program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.Runtime">
            <summary>
            Gets or sets the object used to provide runtime information for the running grid program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.Echo">
            <summary>
            Gets or sets the action which prints out text onto the currently running programmable block's detail info area.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.HasMainMethod">
            <summary>
            Determines whether this grid program has a valid Main method.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridProgram.Main(System.String)">
            <summary>
            Invokes this grid program.
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridProgram.Main(System.String,Sandbox.ModAPI.Ingame.UpdateType)">
            <summary>
            Invokes this grid program with the given update source.
            </summary>
            <param name="argument"></param>
            <param name="updateSource"></param>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.HasSaveMethod">
            <summary>
            Determines whether this grid program has a valid Save method.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridProgram.Save">
            <summary>
            If this grid program has state saving capability, calling this method
            will invoke it.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyGridTerminalSystem">
            <summary>
            Describes grid terminal system interface
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridTerminalSystem.GetBlocks(System.Collections.Generic.List{Sandbox.ModAPI.IMyTerminalBlock})">
            <summary>
            Fills the provided list with all the blocks reachable by this grid terminal system. This means all blocks on the same
            grid, or connected via rotors, pistons or connectors.
            
            </summary>
            <param name="blocks">A preallocated list to receive the blocks.</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridTerminalSystem.GetBlockGroups(System.Collections.Generic.List{Sandbox.ModAPI.IMyBlockGroup})">
            <summary>
            Fills the provided list with the block groups reachable by this grid terminal system.
            </summary>
            <param name="blockGroups"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridTerminalSystem.GetBlocksOfType``1(System.Collections.Generic.List{Sandbox.ModAPI.IMyTerminalBlock},System.Func{Sandbox.ModAPI.IMyTerminalBlock,System.Boolean})">
            <summary>
            Fills the provided list with the blocks reachable by this grid terminal system. This means all blocks on the same
            grid, or connected via rotors, pistons or connectors.
            </summary>
            <typeparam name="T">The type of blocks to retrieve.</typeparam>
            <param name="blocks">A preallocated list to receive the blocks.</param>
            <param name="collect">Provide a filter method to determine if a given group should be added or not.</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridTerminalSystem.SearchBlocksOfName(System.String,System.Collections.Generic.List{Sandbox.ModAPI.IMyTerminalBlock},System.Func{Sandbox.ModAPI.IMyTerminalBlock,System.Boolean})">
            <summary>
            Fills the provided list with the blocks reachable by this grid terminal system. This means all blocks on the same
            grid, or connected via rotors, pistons or connectors. 
            </summary>
            <param name="name">The blocks must contain the given name in their name.</param>
            <param name="blocks">A preallocated list to receive the blocks.</param>
            <param name="collect">Provide a filter method to determine if a given group should be added or not.</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridTerminalSystem.GetBlockWithName(System.String)">
            <summary>
            Returns the first block found with the given name.
            </summary>
            <param name="name">The block must contain the given name in their name.</param>
            <returns>First found block with <c>name</c> or <c>null</c> if no block with that name can be found</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridTerminalSystem.GetBlockGroupWithName(System.String)">
            <summary>
            Returns the first block group found with the given name. Will return <c>null</c> if no block group with that name
            can be found.
            </summary>
            <param name="name">The block group must contain the given name in their name.</param>
            <returns>First found block group with <c>name</c> or <c>null</c> if no block group with that name can be found</returns>
        </member>
        <member name="E:Sandbox.ModAPI.IMyGridTerminalSystem.GroupAdded">
            <summary>
            Called when new block group was added. Warning, on grid disconnects, you would need to unsubscribe and subscribe to new TerminalSystem 
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyGridTerminalSystem.GroupRemoved">
            <summary>
            Called when new block group was removed. Warning, on grid disconnects, you would need to unsubscribe and subscribe to new TerminalSystem 
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyGyro">
            <summary>
            Describes gyro block interface
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGyro.GyroStrengthMultiplier">
            <summary>
            Gets or sets multiplier for max gyro strength  
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGyro.PowerConsumptionMultiplier">
            <summary>
            Gets or sets multiplier gyro power consumption
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyIngameScripting">
            <summary>
            Allows mods change programmable block script settings
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyIngameScripting.ScriptBlacklist">
            <summary>
            Provides the ability for mods to add and remove items from a type and member blacklist,
            giving the ability to remove even more API for scripts. Intended for server admins to
            restrict what people are able to do with scripts to keep their simspeed up.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyIngameScripting.Clean">
            <summary>
            Clears all <see cref="P:Sandbox.ModAPI.IMyIngameScripting.ScriptBlacklist"/> changes 
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.MyVRageIngameScriptingAdapter">
            <summary>
            Allows mods change programmable block script settings
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.ScriptBlacklist">
            <summary>
            Provides the ability for mods to add and remove items from a type and member blacklist,
            giving the ability to remove even more API for scripts. Intended for server admins to
            restrict what people are able to do with scripts to keep their simspeed up.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.#ctor(VRage.Scripting.IMyIngameScripting)">
            <summary>
            Implements MyVRageIngameScriptingAdapter constructor
            </summary>
            <param name="impl">script settings</param>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.Clean">
            <summary>
            Clears all <see cref="P:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.ScriptBlacklist"/> changes 
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.GetWhitelist">
            <summary>
            Gets information about whitelisted classes and methods
            </summary>
            <returns>Dictionary reader, where key - name of namespace, type of method, and value - in which context it is allowed</returns>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.GetBlacklistedIngameEntries">
            <summary>
            Gets the entries that have been blacklisted for the ingame scripts.
            </summary>
            <returns>Hashset reader of namespaces that were whitelisted</returns>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.OpenIngameBlacklistBatch">
            <summary>
            Opens a batch to add or remove members to the blacklist.
            </summary>
            <returns>Object allowing you change blacklisted members/types/namespaces.</returns>
        </member>
        <member name="T:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.MyScriptBlacklistBatchAdapter">
            <summary>
            Allows blacklist for program block script to use certain namespaces, types or methods
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.MyScriptBlacklistBatchAdapter.AddNamespaceOfTypes(System.Type[])">
            <summary>
            Adds to blacklist for program block script some namespaces of provided type
            </summary>
            <param name="types">Namespace names would be taken from this types</param>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.MyScriptBlacklistBatchAdapter.RemoveNamespaceOfTypes(System.Type[])">
            <summary>
            Removes from blacklist for program block script some namespaces of provided type
            </summary>
            <param name="types">Namespace names would be taken from this types</param>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.MyScriptBlacklistBatchAdapter.AddTypes(System.Type[])">
            <summary>
            Adds to blacklist for program block script certain types
            </summary>
            <param name="types">Blacklisted types</param>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.MyScriptBlacklistBatchAdapter.RemoveTypes(System.Type[])">
            <summary>
            Removes from blacklist for program block script certain types
            </summary>
            <param name="types">Blacklisted types</param>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.MyScriptBlacklistBatchAdapter.AddMembers(System.Type,System.String[])">
            <summary>
            Adds to blacklist for program block script certain type members
            </summary>
            <param name="type">Type to blacklist</param>
            <param name="memberNames">Blacklisted members</param>
        </member>
        <member name="M:Sandbox.ModAPI.MyVRageIngameScriptingAdapter.MyScriptBlacklistBatchAdapter.RemoveMembers(System.Type,System.String[])">
            <summary>
            Removes from blacklist for program block script certain type members
            </summary>
            <param name="type">Type to blacklist</param>
            <param name="memberNames">Blacklisted members</param>
        </member>
        <member name="T:Sandbox.ModAPI.IMyInventoryBag">
            <summary>
            Inventory bag spawned when character died, container breaks, or when entity from other inventory cannot be spawned then bag spawned with the item in its inventory.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyJumpDrive">
            <summary>
            Describes jump drive block (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyJumpDrive.Jump(System.Boolean)">
            <summary>
            Requests the jump drive to make a jump.
            MODDERS: Use IMyCubeGrid.JumpSystems for more options.
            </summary>
            <param name="usePilot">Pass <b>true</b> to use the controlling player as a direction reference, <b>false</b> to use the default ship controller. Default <b>true</b>.
            </param>
        </member>
        <member name="P:Sandbox.ModAPI.IMyJumpDrive.CurrentStoredPower">
            <summary>
            Gets or sets the stored charge.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyLargeTurretBase">
            <summary>
            Describes turret block (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyLargeTurretBase.Target">
            <summary>
            Gets current turret target
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyLargeTurretBase.SetTarget(VRage.ModAPI.IMyEntity)">
            <summary>
            Tracks target without position prediction
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyLargeTurretBase.TrackTarget(VRage.ModAPI.IMyEntity)">
            <summary>
            Tracks entity with enabled position prediction
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Sandbox.ModAPI.IMyLaserAntenna">
            <summary>
            Describes laser antenna block interface (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyLaserAntenna.Other">
            <summary>
            Gets the antenna on the remote end of the connection.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyLaserAntenna.IsInRange(Sandbox.ModAPI.IMyLaserAntenna)">
            <summary>
            Returns <b>true</b> if the specific laser antenna is within connection range.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Sandbox.ModAPI.IMyLightingBlock">
            <summary>
            Describes lighting block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyMechanicalConnectionBlock">
            <summary>
            Describes blocks linked with <see cref="F:VRage.Game.ModAPI.GridLinkTypeEnum.Mechanical"/> connection (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMechanicalConnectionBlock.TopGrid">
            <summary>
            Gets the grid of the attached top part
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMechanicalConnectionBlock.Top">
            <summary>
            Gets the attached top part entity
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyMechanicalConnectionBlock.Attach(Sandbox.ModAPI.IMyAttachableTopBlock,System.Boolean)">
            <summary>
            Attaches the specified top part to the base
            </summary>
            <param name="top"></param>
            <param name="updateGroup">true to update grid groups</param>
        </member>
        <member name="T:Sandbox.ModAPI.IMyMeteor">
            <summary>
            Describes meteor entity (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyMissile">
            <summary>
            Describes missile entity (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.MaxTrajectory">
            <summary>
            Gets or sets max travel trajectory
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.Owner">
            <summary>
            Character EntityId or block EntityId that shoots
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.LauncherId">
            <summary>
            Character EntityId or block EntityId that shoots
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.LinearVelocity">
            <summary>
            Gets or sets velocity of missile
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.Origin">
            <summary>
            Get or sets initial position of missile 
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyMissile.IsCharacterIdFriendly(System.Int64)">
            <summary>
            Returns whether player is friendly to missile
            </summary>
            <param name="charId">Player identityId</param>
            <returns>If player is friendly</returns>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.WeaponDefinition">
            <summary>
            Gets MyWeaponDefinition of missile
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.AmmoDefinition">
            <summary>
            Gets MyAmmoDefinition of missile
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.AmmoMagazineDefinition">
            <summary>
            Gets MyAmmoMagazineDefinition of missile
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.ParticleEffect">
            <summary>
            Gets or sets missile trail particle effect
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.ExplosionType">
            <summary>
            Gets or sets explosion type of missile (changes effect of explosion)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.CollidedEntity">
            <summary>
            Gets collided entity, on missile hit. You should get this value only on <see cref="E:Sandbox.ModAPI.IMyMissiles.OnMissileCollided"/> event
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.CollisionPoint">
            <summary>
            Gets collision point, on missile hit. You should get this value only on <see cref="E:Sandbox.ModAPI.IMyMissiles.OnMissileCollided"/> event
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.CollisionNormal">
            <summary>
            Gets collision normal, on missile hit. You should get this value only on <see cref="E:Sandbox.ModAPI.IMyMissiles.OnMissileCollided"/> event
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.ExplosionDamage">
            <summary>
            Gets or sets explosion damage for missile
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.HealthPool">
            <summary>
            Gets or sets health of missile.
            While it is more than 0, it is damaging blocks that it collide with, each time subtracting amount of damage dealt.
            When left health is less or equal 0, missile explodes (if it hitted anything and <see cref="P:Sandbox.ModAPI.IMyMissile.ShouldExplode"/> is true). 
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMissile.ShouldExplode">
            <summary>
            Gets or sets if missile should explode on hit
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyMissile.Destroy">
            <summary>
            Can't be called in Missiles.OnMissileMoved, MissileCollided
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.MissileMoveDelegate">
            <summary>
            Missile Move delegate
            </summary>
            <param name="missile">missile entitye</param>
            <param name="Velocity">velocity</param>
        </member>
        <member name="T:Sandbox.ModAPI.IMyMissiles">
            <summary>
            Interface for controlling missiles
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyMissiles.Remove(System.Int64)">
            <summary>
            Removes missile with EntityId
            </summary>
            <param name="entityId">Missile with this entityId should be removed</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyMissiles.GetAllMissilesInSphere(VRageMath.BoundingSphereD@,System.Collections.Generic.List{VRage.Game.Entity.MyEntity})">
            <summary>
            Returns all missiles in sphere
            </summary>
            <param name="sphere">Bounding sphere</param>
            <param name="result">List, that were results would be added</param>
        </member>
        <member name="E:Sandbox.ModAPI.IMyMissiles.OnMissileAdded">
            <summary>
            Called when missile was created
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyMissiles.OnMissileRemoved">
            <summary>
            Called when missile was removed
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyMissiles.OnMissileMoved">
            <summary>
            Called each frame after missile was moved
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyMissiles.OnMissileCollided">
            <summary>
            Called when missile hits something. May be more than 1 call per missile.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyMotorAdvancedRotor">
            <summary>
            Describes advanced motor rotor (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyMotorAdvancedStator">
            <summary>
            Describes advanced motor stator (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyMotorBase">
            <summary>
            Describes base class for motor, advanced rotor and motor suspension block (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMotorBase.MaxRotorAngularVelocity">
            <summary>
            Gets the maximum angular velocity this rotor is capable of.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMotorBase.RotorAngularVelocity">
            <summary>
            Gets the current angular velocity.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMotorBase.RotorGrid">
            <summary>
            Gets the grid attached to the rotor part
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMotorBase.Rotor">
            <summary>
            Gets the attached rotor part entity
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyMotorBase.AttachedEntityChanged">
            <summary>
            When the rotor head is attached or detached from the base
            </summary>
            <remarks>This event can be called in three states:
            <list type="number">
            <item>Stator is detached from rotor</item>
            <item>Stator is looking for rotor attachment</item>
            <item>Stator is attached to rotor</item>
            </list>
            The looking and attached states will both return <b>true</b> for <see cref="P:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.IsAttached">IsAttached</see>.
            To determine which state it is, use the <see cref="P:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.PendingAttachment">PendingAttachment</see> property: <b>true</b> means awaiting attachment, <b>false</b> means the rotor is attached.
            </remarks>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMotorBase.DummyPosition">
            <summary>
            Gets the dummy position, to aid in attachment
            </summary>
            <remarks>Gets the location where the top rotor piece will attach.</remarks>
        </member>
        <member name="M:Sandbox.ModAPI.IMyMotorBase.Attach(Sandbox.ModAPI.IMyMotorRotor,System.Boolean)">
            <summary>
            Attaches a specified nearby rotor/wheel to the stator/suspension block
            </summary>
            <param name="rotor">Entity to attach</param>
            <param name="updateGroup">true to update grid groups</param>
            <remarks>The rotor to attach must already be in position before calling this method.</remarks>
        </member>
        <member name="T:Sandbox.ModAPI.IMyMotorRotor">
            <summary>
            Describes motor rotor (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMotorRotor.Stator">
            <summary>
            Gets the attached stator/suspension block
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMotorRotor.Base">
            <summary>
            Gets the attached stator/suspension block
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyMotorStator">
            <summary>
            Describes base class for motor, advanced rotor and motor suspension block (mods interface)
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyMotorStator.LimitReached">
            <summary>
            Called when current angle reaching maximum or minimum
            Argument is true, when reaching maximum 
            Argument is false, when reaching minimum 
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyMotorSuspension">
            <summary>
            Describes motor suspension block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyOreDetector">
            <summary>
            Describes ore detector block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyGasGenerator">
            <summary>
            Gas generator interface (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGasGenerator.ProductionCapacityMultiplier">
            <summary>
            Gets or sets multiplier of gas produced and amount of gas item took 
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGasGenerator.PowerConsumptionMultiplier">
            <summary>
            Gets or sets power consumption multiplier
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyOxygenGenerator">
            <summary>
            Describes gas generator block interface - OBSOLETE
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyGasTank">
            <summary>
            Describes gas tank block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyOxygenTank">
            <summary>
            Describes oxygen tank block interface - OBSOLETE
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyPassage">
            <summary>
            Describes passage block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyPistonBase">
            <summary>
            Describes piston block (mods interface)
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyPistonBase.LimitReached">
            <summary>
            Called when piston reaching maximum or minimum extension
            Argument is true, when piston is extending
            Argument is false, when piston is retracting
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyPistonBase.AttachedEntityChanged">
            <summary>
            Notifies when the top grid is attached or detached
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyPistonBase.Attach(Sandbox.ModAPI.IMyPistonTop,System.Boolean)">
            <summary>
            Attaches a specified nearby top part to the piston block
            </summary>
            <param name="top">Entity to attach</param>
            <param name="updateGroup">true to update grid groups</param>
            <remarks>The top to attach must already be in position before calling this method.</remarks>
        </member>
        <member name="T:Sandbox.ModAPI.IMyPistonTop">
            <summary>
            Describes piston top block (movable part) (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyPistonTop.Piston">
            <summary>
            Gets the attached piston block
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyPistonTop.Base">
            <summary>
            Gets the attached stator/suspension block
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyPowerProducer">
            <summary>
            Describes power producer block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyProductionBlock">
            <summary>
            Describes production blocks : refinery block, assembler block, survival kit block. (mods interface)
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyProductionBlock.StartedProducing">
            <summary>
            Called when production block has started producing items
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyProductionBlock.StoppedProducing">
            <summary>
            Called when production block has stopped producing items (ex: no power, no resources, inventory full)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyProductionBlock.InputInventory">
            <summary>
            Gets inventory responsible for source items
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyProductionBlock.OutputInventory">
            <summary>
            Gets inventory responsible for produced items
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProductionBlock.CanUseBlueprint(VRage.Game.MyDefinitionBase)">
            <summary>
            Can this production block produce this blueprint?
            </summary>
            <param name="blueprint">A MyBlueprintDefinition that defines the blueprint</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProductionBlock.AddQueueItem(VRage.Game.MyDefinitionBase,VRage.MyFixedPoint)">
            <summary>
            Adds a blueprint to the production queue
            </summary>
            <param name="blueprint">A MyBlueprintDefinition that defines the blueprint</param>
            <param name="amount">Amount of items</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProductionBlock.InsertQueueItem(System.Int32,VRage.Game.MyDefinitionBase,VRage.MyFixedPoint)">
            <summary>
            Inserts a blueprint into the production queue
            </summary>
            <param name="idx">Index of the item</param>
            <param name="blueprint">A MyBlueprintDefinition that defines the blueprint</param>
            <param name="amount">Amount of items</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProductionBlock.GetQueue">
            <summary>
            Gets the current production queue (copy)
            </summary>
            <returns>List of MyProductionQueueItems</returns>
        </member>
        <member name="T:Sandbox.ModAPI.MyProductionQueueItem">
            <summary>
            Describes item in queue of production block (PB scripting interface)(mods interface)
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProductionQueueItem.Amount">
            <summary>
            Gets or sets amount of items needed to be produced
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProductionQueueItem.Blueprint">
            <summary>
            Gets or sets blueprint for production
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProductionQueueItem.ItemId">
            <summary>
            Gets or sets blueprint for production
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyProgrammableBlock">
            <summary>
            Describes programmable block (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProgrammableBlock.Recompile">
            <summary>
            Recompiles script
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProgrammableBlock.Run">
            <summary>
            Runs with default terminal argument
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProgrammableBlock.Run(System.String)">
            <summary>
            Runs with specified argument
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProgrammableBlock.Run(System.String,Sandbox.ModAPI.Ingame.UpdateType)">
            <summary>
            Runs with the specified argument and update source
            </summary>
            <param name="argument"></param>
            <param name="updateSource"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProgrammableBlock.TryRun(System.String)">
            <summary>
            Attempts to run this programmable block using the given argument. An already running
            programmable block cannot be run again.
            This is equivalent to running <c>block.ApplyAction("Run", argumentsList);</c>
            This should be called from an ingame script. Do not use in mods.
            </summary>
            <param name="argument"></param>
            <returns><c>true</c> if the action was applied, <c>false</c> otherwise</returns>
        </member>
        <member name="P:Sandbox.ModAPI.IMyProgrammableBlock.ProgramData">
            <summary>
            Program contents. Automatically recompiles when set, if possible.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyProgrammableBlock.StorageData">
            <summary>
            Program storage (server only!)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyProgrammableBlock.HasCompileErrors">
            <summary>
            Returns true if the script has compile errors (server only!)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyProjectileDetector">
            <summary>
            Describes projectile  that have custom logic on handling bullets (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjectileDetector.GetDetectorIntersectionWithLine(VRageMath.LineD@,System.Nullable{VRageMath.Vector3D}@)">
            <summary>
            Gets intersection between line and detector
            </summary>
            <param name="line">Line of the bullet</param>
            <param name="hit">World hit position</param>
            <returns>Should return true if line intersects detector</returns>
        </member>
        <member name="P:Sandbox.ModAPI.IMyProjectileDetector.IsDetectorEnabled">
            <summary>
            Gets if detector is enabled
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyProjectileDetector.HitEntity">
            <summary>
            Gets entity which was hit for this detector. It's not used for any logic with data, just for reporting to projectile system, which entity was hit by the projectile.
            </summary>
            <returns>Entity that projectile detector represents</returns>
        </member>
        <member name="P:Sandbox.ModAPI.IMyProjectileDetector.DetectorAABB">
            <summary>
            Gets AABB of the detector
            </summary>
            <returns>Detector AABB in world coordinates</returns>
        </member>
        <member name="T:Sandbox.ModAPI.OnProjectileAddedRemoved">
            <summary>
            Index is used to get position of projectile
            Projectile can change it index, when it's index == projectilesCount - 1
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.HitInterceptor">
            <summary>
            Provide information about projectiles hit.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyProjectiles">
            <summary>
            Interface for controlling projectile behavior (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjectiles.AddOnHitInterceptor(System.Int32,Sandbox.ModAPI.HitInterceptor)">
            <summary>
            Call function when projectile hits something
            </summary>
            <param name="priority">Calls are ordered by priority. Functions with lower priority are called earlier</param>
            <param name="interceptor">Function that should be called on projectile hit</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjectiles.RemoveOnHitInterceptor(Sandbox.ModAPI.HitInterceptor)">
            <summary>
            Removed function from call when projectile hits something
            </summary>
            <param name="interceptor">Function that should not be called on projectile hit</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjectiles.GetProjectile(System.Int32)">
            <summary>
            Gets projectile info
            </summary>
            <param name="index">index of the info</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjectiles.MarkProjectileForDestroy(System.Int32)">
            <summary>
            Marks projectiles for destroy, doesn't decrease projectiles count. Shifting projectiles id, on next frame
            </summary>
            <param name="index">index of projectile</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjectiles.GetAllProjectileCount">
            <summary>
            Gets amount of projectiles currently existing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjectiles.Add(VRage.Game.MyDefinitionBase,VRage.Game.MyDefinitionBase,VRageMath.Vector3D,VRageMath.Vector3,VRageMath.Vector3,VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity,VRage.Game.Entity.MyEntity[],System.Boolean,System.UInt64)">
            <summary>
            Adds new projectile
            </summary>
            <param name="weaponDefinition">Definition of weapon. Should be MyWeaponDefinition</param>
            <param name="ammoDefinition">Definition of ammo. Should be MyAmmoDefinition</param>
            <param name="origin">Spawn position</param>
            <param name="initialVelocity">Speed of object that fired projectile</param>
            <param name="directionNormalized">Direction of bullet</param>
            <param name="owningEntity">Rifle, block, ...</param>
            <param name="owningEntityAbsolute">Character, main ship cockpit. Used only to record damage statistics in single player</param>
            <param name="weapon">Shooter entity (rifle, block)</param>
            <param name="ignoredEntities"></param>
            <param name="supressHitIndicator">When true, hit indicator won't show</param>
            <param name="owningPlayer">Player that owns this projectile. Adds hit indication for that player on hit, and using that id in safezone access checks</param>
        </member>
        <member name="E:Sandbox.ModAPI.IMyProjectiles.OnProjectileAdded">
            <summary>
            Called when new projectile was added
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyProjectiles.OnProjectileRemoving">
            <summary>
            Called when projectile was removed
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjectiles.AddHitDetector(Sandbox.ModAPI.IMyProjectileDetector)">
            <summary>
            Adds projectile detector. It allows to detect projectiles flying though it, and can cause them hit it
            Example: Safezone, ship shields 
            </summary>
            <param name="detector">Detector logic</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjectiles.RemoveHitDetector(Sandbox.ModAPI.IMyProjectileDetector)">
            <summary>
            Removes projectile detector
            </summary>
            <param name="detector">Detector logic</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjectiles.GetSurfaceAndMaterial(VRage.ModAPI.IMyEntity,VRageMath.LineD@,VRageMath.Vector3D@,System.UInt32,Sandbox.ModAPI.MySurfaceImpactEnum@,VRage.Utils.MyStringHash@)">
            <summary>
            Gets information about material and surface, that bullet hitted
            Arguments should be taken from <see cref="T:Sandbox.ModAPI.MyProjectileHitInfo"/> on projectile hit (subscribe on event with <see cref="M:Sandbox.ModAPI.IMyProjectiles.AddOnHitInterceptor(System.Int32,Sandbox.ModAPI.HitInterceptor)"/>).
            </summary>
            <param name="entity">Entity that was hitted</param>
            <param name="line">Part of bullet trajectory</param>
            <param name="hitPosition">World position of hit</param>
            <param name="shapeKey">Should be taken from <see cref="F:Sandbox.ModAPI.MyProjectileHitInfo.HitShapeKey"/></param>
            <param name="surfaceImpact">Returns surface, that bullet hitted</param>
            <param name="materialType">Returns material, that bullet hitted</param>
        </member>
        <member name="T:Sandbox.ModAPI.BuildCheckResult">
            <summary>
            Describes build check results
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.BuildCheckResult.OK">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.BuildCheckResult.NotConnected">
            <summary>
            Not connected
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.BuildCheckResult.IntersectedWithGrid">
            <summary>
            Intersecting with other grid
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.BuildCheckResult.IntersectedWithSomethingElse">
            <summary>
            Intersection with some other entity
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.BuildCheckResult.AlreadyBuilt">
            <summary>
            Already built
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.BuildCheckResult.NotFound">
            <summary>
            Not found
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.BuildCheckResult.NotWeldable">
            <summary>
            Not weldable
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyProjector">
            <summary>
            Describes projector block (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyProjector.ProjectedGrid">
            <summary>
            Gets currently projected grid. Will return null if there is no active projection.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjector.SetProjectedGrid(VRage.Game.MyObjectBuilder_CubeGrid)">
            <summary>
            Allows you to set the currently projected grid
            </summary>
            <param name="grid">New grid projection</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjector.CanBuild(VRage.Game.ModAPI.IMySlimBlock,System.Boolean)">
            <summary>
            Checks if it's possible to build this block.
            </summary>
            <param name="projectedBlock">Block to test</param>
            <param name="checkHavokIntersections">true if you want checks for intersections</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjector.Build(VRage.Game.ModAPI.IMySlimBlock,System.Int64,System.Int64,System.Boolean,System.Int64)">
            <summary>
            Adds the first component to construction stockpile and creates the block.
            This doesn't remove materials from inventory on its own.
            </summary>
            <param name="cubeBlock"></param>
            <param name="owner">Identity id who will own this block</param>
            <param name="builder">Entity id of the building entity</param>
            <param name="requestInstant"></param>
            <param name="builtBy">Identity for whom it is built</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjector.LoadBlueprint(System.String)">
            <summary>
            Loads blueprint
            </summary>
            <param name="path">Path to blueprint file</param>
            <returns>True if successfully loaded</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyProjector.LoadRandomBlueprint(System.String)">
            <summary>
            Load random blueprint from game content Data/Blueprints (not player blueprints) 
            </summary>
            <param name="searchPattern">Used as search pattern in <see cref="M:System.IO.Directory.GetFiles(System.String,System.String)"/>. The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param>
            <returns>True if successfully loaded</returns>
        </member>
        <member name="T:Sandbox.ModAPI.IMyRadioAntenna">
            <summary>
            Describes radio antenna block interface
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyReactor">
            <summary>
            Describes reactor block (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyReactor.PowerOutputMultiplier">
            <summary>
            Gets or sets multiplier that increasing/decreasing amount of produced power keeping fuel consumption same. Default value = 1
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyRefinery">
            <summary>
            Describes assembler block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyReflectorLight">
            <summary>
            Describes spotlight block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyRemoteControl">
            <summary>
            Describes remote control block (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyRemoteControl.GetNearestPlayer(VRageMath.Vector3D@)">
            <summary>
            Gets the nearest player's position.
            </summary>
            <param name="playerPosition"></param>
            <returns>True if have found player, and you have ability to use this function</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyRemoteControl.GetFreeDestination(VRageMath.Vector3D,System.Single,System.Single)">
            <summary>
            Gets a destination and tries to fix it so that it does not collide with anything
            </summary>
            <param name="originalDestination">The final destination that the remote wants to get to.</param>
            <param name="checkRadius">The maximum radius until which this method should search.</param>
            <param name="shipRadius">The radius of our ship. Make sure that this is large enough to avoid collision. A value of 0f will use the ship's WorldVolume radius.</param>
            <returns>Adjusted position</returns>
        </member>
        <member name="T:Sandbox.ModAPI.IMyScriptBlacklist">
            <summary>
            Exposes blacklist functionality to allow mods to disallow parts of the scripting API that has been
            allowed by the system whitelist.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyScriptBlacklist.GetWhitelist">
            <summary>
            Gets the entries that have been whitelisted by the system. Each entry may represent a whole namespace,
            a single type and all its members, or a single member of a type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyScriptBlacklist.GetBlacklistedIngameEntries">
            <summary>
            Gets the entries that have been blacklisted for the ingame scripts.
            </summary>
            <returns>Reader of blacklisted "ingame" entries</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyScriptBlacklist.OpenIngameBlacklistBatch">
            <summary>
            Opens a batch to add or remove members to the blacklist.
            </summary>
            <returns>Black list batch editor</returns>
        </member>
        <member name="T:Sandbox.ModAPI.IMyScriptBlacklistBatch">
            <summary>
                A handle which enables adding members to the blacklist in a batch. It is highly
                recommended that you try to group your changes into as few batches as possible.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyScriptBlacklistBatch.AddNamespaceOfTypes(System.Type[])">
            <summary>
                Adds the entire namespace of one or more given types to the blacklist
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyScriptBlacklistBatch.RemoveNamespaceOfTypes(System.Type[])">
            <summary>
                Removes namespaces previously added with <see cref="M:Sandbox.ModAPI.IMyScriptBlacklistBatch.AddNamespaceOfTypes(System.Type[])"/> from the blacklist.
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyScriptBlacklistBatch.AddTypes(System.Type[])">
            <summary>
                Adds one or more specific types and all their members to the blacklist.
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyScriptBlacklistBatch.RemoveTypes(System.Type[])">
            <summary>
                Removes types previously added with <see cref="M:Sandbox.ModAPI.IMyScriptBlacklistBatch.AddTypes(System.Type[])"/> from the blacklist.
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyScriptBlacklistBatch.AddMembers(System.Type,System.String[])">
            <summary>
                Adds only the specified members to the blacklist.
            </summary>
            <param name="type"></param>
            <param name="memberNames"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyScriptBlacklistBatch.RemoveMembers(System.Type,System.String[])">
            <summary>
                Removes types previously added with <see cref="M:Sandbox.ModAPI.IMyScriptBlacklistBatch.AddMembers(System.Type,System.String[])"/> to the blacklist.
            </summary>
            <param name="type"></param>
            <param name="memberNames"></param>
        </member>
        <member name="T:Sandbox.ModAPI.IMySensorBlock">
            <summary>
            Describes sensor block (mods interface)
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMySensorBlock.StateChanged">
            <summary>
            Called when sensor state changer. (Found something)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMySensorBlock.FieldMin">
            <summary>
            Gets or sets the sensor mininum field as a Vector3(-L,-Bo,-F).
            </summary>
            <remarks>
            -X is Left
            -Y is Bottom
            -Z is Front
            </remarks>
        </member>
        <member name="P:Sandbox.ModAPI.IMySensorBlock.FieldMax">
            <summary>
            Gets or sets the sensor maximum field as a Vector3(R,T,Ba).
            </summary>
            <remarks>
            X is Right
            Y is Top
            Z is Back
            </remarks>
        </member>
        <member name="T:Sandbox.ModAPI.IMyShipConnector">
            <summary>
            Describes connector block (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShipConnector.OtherConnector">
            <summary>
            Gets the connector this one is connected to when <see cref="P:Sandbox.ModAPI.Ingame.IMyShipConnector.Status"/> is <see cref="F:Sandbox.ModAPI.Ingame.MyShipConnectorStatus.Connected"/>.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyShipController">
            <summary>
            Describes ship controller block (cockpit/remote control/cryopod) (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShipController.HasFirstPersonCamera">
            <summary>
            Gets if this ship controller contains a first-person camera view.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShipController.LastPilot">
            <summary>
            Get the last character that was piloting the controller.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShipController.Pilot">
            <summary>
            Get the character that is currently piloting the controller.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShipController.IsShooting">
            <summary>
            Gets if the ship is shooting selected weapons.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShipController.IsDefault3rdView">
            <summary>
            If player gets into this cockpit for the first time, the camera is in 3rd view
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyShipDrill">
            <summary>
            Describes ship drill block (mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShipDrill.DrillHarvestMultiplier">
            <summary>
            Gets/sets multiplier affecting amount of ore mined from voxels
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShipDrill.PowerConsumptionMultiplier">
            <summary>
            Gets/sets multiplier affecting drill power consumption
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyShipGrinder">
            <summary>
            Describes ship grinder block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyShipToolBase">
            <summary>
            Describes ship tool block (drill/grinder/welder) (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyShipWelder">
            <summary>
            Describes ship welder interface (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyShipWelder.IsWithinWorldLimits(Sandbox.ModAPI.IMyProjector,System.String,System.Int32)">
            <summary>
            Determines whether the projected grid still fits within block limits set by server after a new block is added
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyShootOrigin">
            <summary>
            Interface describing part of weapon block logic
            Used in detection if target is visible
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShootOrigin.ShootOrigin">
            <summary>
            Gets shot starting position
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShootOrigin.GetAmmoDefinition">
            <summary>
            Gets ammo definition
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyShootOrigin.MaxShootRange">
            <summary>
            Gets weapon max shoot range
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMySmallGatlingGun">
            <summary>
            Describes gatling gun (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMySmallMissileLauncher">
            <summary>
            Describes missile launcher block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMySmallMissileLauncherReload">
            <summary>
            Describes reloadable missile block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyStoreBlock">
            <summary>
            Describes store block (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyStoreBlock.InsertOffer(VRage.Game.ModAPI.MyStoreItemData,System.Int64@)">
            <summary>
            Creates store item and returns its id.
            </summary>
            <param name="item">Data defining the store item.</param>
            <param name="id">Id of the item in the shop. (Ex. needed to remove the item)</param>
            <returns>Result of the creation of the store item.</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyStoreBlock.InsertOrder(VRage.Game.ModAPI.MyStoreItemData,System.Int64@)">
            <summary>
            Creates store item and returns its id.
            </summary>
            <param name="item">Data defining the store item.</param>
            <param name="id">Id of the item in the shop. (Ex. needed to remove the item)</param>
            <returns>Result of the creation of the store item.</returns>
        </member>
        <member name="T:Sandbox.ModAPI.IMyTargetDummyBlock">
            <summary>
            Describes target dummy block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyTargetingCapableBlock">
            <summary>
            Describes block that can target (cockpits and turrets) (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTargetingCapableBlock.IsTargetLockingEnabled">
            <summary>
            Gets if target locking is enabled 
            </summary>
            <returns>True if enabled</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTargetingCapableBlock.SetLockedTarget(VRage.Game.ModAPI.IMyCubeGrid)">
            <summary>
            Sets locked target grid
            </summary>
            <remarks>Should be called only for <see cref="T:Sandbox.ModAPI.IMyShipController"/>. Other implementations has mock logic inside</remarks>        
            <param name="target">Target grid</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTargetingCapableBlock.GetWorldMatrix">
            <summary>
            Gets barrel or block world matrix  
            </summary>
            <returns>Barrel or block world matrix</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTargetingCapableBlock.CanActiveToolShoot">
            <summary>
            Get whether toolbar selected tool can shoot
            </summary>
            <remarks>Should be called only for <see cref="T:Sandbox.ModAPI.IMyShipController"/>. Other implementations has mock logic inside</remarks>
            <returns>Whether can shoot</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTargetingCapableBlock.IsShipToolSelected">
            <summary>
            Get whether toolbar selected item is ship tool (drill, grinder, welder)
            </summary>
            <remarks>Should be called only for <see cref="T:Sandbox.ModAPI.IMyShipController"/>. Other implementations has mock logic inside</remarks>
            <returns>Whether tool is selected</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTargetingCapableBlock.GetActiveToolPosition">
            <summary>
            Gets average position 
            </summary>
            <returns></returns>
            <remarks>Should be called only for <see cref="T:Sandbox.ModAPI.IMyShipController"/>. Other implementations has mock logic inside</remarks>
        </member>
        <member name="T:Sandbox.ModAPI.IMyTerminalActionsHelper">
            <summary>
            API class for interactions with terminal actions and properties
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalActionsHelper.GetActions(System.Type,System.Collections.Generic.List{Sandbox.ModAPI.Interfaces.ITerminalAction},System.Func{Sandbox.ModAPI.Interfaces.ITerminalAction,System.Boolean})">
            <summary>
            Gets available <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalAction"/> for a block with specified type 
            </summary>
            <param name="blockType">Block type, that should have actions</param>
            <param name="resultList">Preallocated list, where results would be added</param>
            <param name="collect">Filter function, if it returns true, item would be added to list</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalActionsHelper.SearchActionsOfName(System.String,System.Type,System.Collections.Generic.List{Sandbox.ModAPI.Interfaces.ITerminalAction},System.Func{Sandbox.ModAPI.Interfaces.ITerminalAction,System.Boolean})">
            <summary>
            Gets available <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalAction"/> for a block with specified type and name
            </summary>
            <param name="name">Action should contain or be equal to this argument</param>
            <param name="blockType">Block type, that should have actions</param>
            <param name="resultList">Preallocated list, where results would be added</param>
            <param name="collect">Filter function, if it returns true, item would be added to list</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalActionsHelper.GetActionWithName(System.String,System.Type)">
            <summary>
            Gets first available <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalAction"/> for a block with specified type and name
            </summary>
            <param name="actionId">action.Id should be equal to this argument</param>
            <param name="blockType">Block type, that should have action</param>
            <returns>Terminal action or null</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalActionsHelper.GetProperty(System.String,System.Type)">
            <summary>
            Gets property by id
            </summary>
            <param name="id">Terminal property id should be equal this argument</param>
            <param name="blockType">Block type, that should have property</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalActionsHelper.GetProperties(System.Type,System.Collections.Generic.List{Sandbox.ModAPI.Interfaces.ITerminalProperty},System.Func{Sandbox.ModAPI.Interfaces.ITerminalProperty,System.Boolean})">
            <summary>
            Gets all properties that belongs to specific block
            </summary>
            <param name="blockType">Block type, that should have properties</param>
            <param name="resultList">Preallocated list, where results would be added</param>
            <param name="collect">Filter function, if it returns true, item would be added to list</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalActionsHelper.GetTerminalSystemForGrid(VRage.Game.ModAPI.IMyCubeGrid)">
            <summary>
            Gets <see cref="T:Sandbox.ModAPI.IMyGridTerminalSystem"/> for grid
            </summary>
            <remarks>Connected grids with <see cref="F:VRage.Game.ModAPI.GridLinkTypeEnum.Logical"/> linking has 1 same for all <see cref="T:Sandbox.ModAPI.IMyGridTerminalSystem"/>. You can pass any grid belonging to that grid-group.</remarks>
            <param name="grid">For which you want to <see cref="T:Sandbox.ModAPI.IMyGridTerminalSystem"/></param>
            <returns><see cref="T:Sandbox.ModAPI.IMyGridTerminalSystem"/> or null, if called too early (on MyCubeGrid.InitInternal).</returns>
        </member>
        <member name="T:Sandbox.ModAPI.IMyTerminalBlock">
            <summary>
            Describes assembler block (mods interface)
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyTerminalBlock.CustomDataChanged">
            <summary>
            Called when custom data of block changed
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyTerminalBlock.CustomNameChanged">
            <summary>
            Called when custom name of block changed
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyTerminalBlock.OwnershipChanged">
            <summary>
            Called when block ownership changed
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyTerminalBlock.PropertiesChanged">
            <summary>
            Called when any of block properties changed.
            It could be anything, starting from CustomName ending with Inventory items
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyTerminalBlock.ShowOnHUDChanged">
            <summary>
            Called when ShowOnHUD Changed
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyTerminalBlock.VisibilityChanged">
            <summary>
            Called properties that modify the visibility of this block's controls, are changed
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyTerminalBlock.AppendingCustomInfo">
            <summary>
            Event to append custom info.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalBlock.RefreshCustomInfo">
            <summary>
            Raises AppendingCustomInfo so every subscriber can append custom info.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalBlock.IsInSameLogicalGroupAs(Sandbox.ModAPI.IMyTerminalBlock)">
            <summary>
            Determines whether this block is in the same logical group as the other, meaning they're connected
            either mechanically or via blocks like connectors. Be aware that using merge blocks combines grids into one, so this function
            will not filter out grids connected that way.
            </summary>
            <param name="other">Block</param>
            <returns>True if blocks belongs to same grids, or their grids connected with <see cref="F:VRage.Game.ModAPI.GridLinkTypeEnum.Logical"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalBlock.IsSameConstructAs(Sandbox.ModAPI.IMyTerminalBlock)">
            <summary>
            Determines whether this block is mechanically connected to the other. This is any block connected
            with rotors or pistons or other mechanical devices, but not things like connectors. This will in most
            cases constitute your complete construct. Be aware that using merge blocks combines grids into one, so this function
            will not filter out grids connected that way.
            </summary>
            <param name="other"></param>
            <returns>True if blocks belongs to same grids, or their grids connected with <see cref="F:VRage.Game.ModAPI.GridLinkTypeEnum.Logical"/></returns>
        </member>
        <member name="T:Sandbox.ModAPI.CustomControlGetDelegate">
            <summary>
            Allows you to modify the terminal control list before it is displayed to the user.  Modifying controls will change which controls are displayed.
            </summary>
            <param name="block">The block that was selected</param>
            <param name="controls">The list of controls for this block</param>
        </member>
        <member name="T:Sandbox.ModAPI.CustomActionGetDelegate">
            <summary>
            Allows you to modify the actions associated with a block before it's displayed to user. 
            </summary>
            <param name="block">The block actions are associated with</param>
            <param name="actions">The list of actions for this block</param>
        </member>
        <member name="T:Sandbox.ModAPI.IMyTerminalControls">
            <summary>
            This interface allows you to query, add or remove terminal controls for a block.  The terminal controls are the controls that appear
            in the terminal screen when you select a block.  You may add new controls, remove existing controls, or modify existing controls.
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyTerminalControls.CustomControlGetter">
            <summary>
            This event allows you to modify the list of controls that the game displays when a user selects a block.  Each time terminal controls are 
            enumerated for a block, this delegate is called, which allows you to modify the control list directly, and remove/add as you see fit before 
            the controls are displayed.  This is to allow fine grain control of the controls being displayed, so you can display only controls you want to
            in specific situations (like blocks with different subtypes, or even on specific blocks by entityId)
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyTerminalControls.CustomActionGetter">
            <summary>
            This event allows you to modify the list of actions available when a user wants to select an action for a block in the toolbar.  Modifying the list
            in this event modifies the list displayed to the user so that you can customize it in specific situations (like blocks with different subtypes, 
            or even on specific blocks by entityId)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalControls.GetControls``1(System.Collections.Generic.List{Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControl}@)">
            <summary>
            Gets the controls associated with a block.
            </summary>
            <typeparam name="TBlock">This is the object builder type of the associated block you want to get terminal controls for</typeparam>
            <param name="items">The list that contains the terminal controls for this block</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalControls.AddControl``1(Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControl)">
            <summary>
            Adds a terminal control to a block.
            </summary>
            <typeparam name="TBlock">This is the ModAPI interface of the associated block you want to add a terminal control to</typeparam>
            <param name="item">This is the control you're adding, created with CreateControl or CreateProperty</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalControls.RemoveControl``1(Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControl)">
            <summary>
            Removes a terminal control from a block.
            </summary>
            <typeparam name="TBlock">This is the ModAPI interface of the associated block you want to remove a terminal control from</typeparam>
            <param name="item">This is the control you're removing.  Use GetControls to get the item itself.</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalControls.CreateControl``2(System.String)">
            <summary>
            This creates a control that can be added to a block.
            </summary>
            <typeparam name="TControl">The type of control you're creating</typeparam>
            <typeparam name="TBlock">The ModAPI interface of the associated block</typeparam>
            <param name="id">A unique identifier for this control</param>
            <returns>Returns an interface to the control you've created depending on TControl</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalControls.CreateProperty``2(System.String)">
            <summary>
            This creates a property that can be added to a block.  A property is not visible on the terminal screen but can hold a value that can be used in
            programmable blocks.
            </summary>
            <typeparam name="TValue">The type of property you're creating</typeparam>
            <typeparam name="TBlock">The ModAPI interface of the associated block</typeparam>
            <param name="id">A unique identifier for this property</param>
            <returns>Returns an IMyTerminalControlProperty that can be added to a block via AddControl</returns>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalControls.GetActions``1(System.Collections.Generic.List{Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction}@)">
            <summary>
            This allows you to get all actions associated with this block.
            </summary>
            <typeparam name="TBlock">The ModAPI interface of the associated block</typeparam>
            <param name="items">The list that contains the actions associated with this block</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalControls.AddAction``1(Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction)">
            <summary>
            This allows you to add an action to an associated block
            </summary>
            <typeparam name="TBlock">The ModAPI interface of the associated block</typeparam>
            <param name="action">An IMyTerminalAction object returned from CreateAction</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalControls.RemoveAction``1(Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction)">
            <summary>
            This allows you to remove an action from a block
            </summary>
            <typeparam name="TBlock">The ModAPI interface of the associated block</typeparam>
            <param name="action">An IMyTerminalAction object</param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalControls.CreateAction``1(System.String)">
            <summary>
            This allows you to create an action to associate with a block
            </summary>
            <typeparam name="TBlock">The ModAPI interface of the associated block</typeparam>
            <param name="id">A unique identifier for this action</param>
            <returns>An IMyTerminalAction object</returns>
        </member>
        <member name="T:Sandbox.ModAPI.IMyTextPanel">
            <summary>
            Describes text panel block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyTextSurface">
            <summary>
            Describes one of block LCDs where you can write text or draw things (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyTextSurfaceProvider">
            <summary>
            Describes block, that has at least 1 text surface (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyThrust">
            <summary>
            Describes assembler block (mods interface)
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyThrust.ThrustOverrideChanged">
            <summary>
            Event when thrust override changes
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyThrust.ThrustMultiplier">
            <summary>
            Gets or set the thrust multiplier
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyThrust.PowerConsumptionMultiplier">
            <summary>
            Gets or set power consumption multiplier
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyUpgradableBlock">
            <summary>
            Describes block, which has upgrade effects from block <see cref="T:Sandbox.ModAPI.Ingame.IMyUpgradableBlock"/> (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyUpgradeModule">
            <summary>
            Describes upgrade module block (mods interface) <see cref="T:Sandbox.ModAPI.Ingame.IMyUpgradeModule"/>
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyUserControllableGun">
            <summary>
            Describes gun block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyVendingMachine">
            <summary>
            Describes vending machine block (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyVendingMachine.SelectNextItem">
            <summary>
            Select next item.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyVendingMachine.SelectPreviewsItem">
            <summary>
            Select previews item.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyVendingMachine.Buy">
            <summary>
            Sells the item to the person using the machine.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyWarhead">
            <summary>
            Describes warhead block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyWheel">
            <summary>
            Describes wheel block (mods interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyAdvancedDoor">
            <summary>
            Describes advanced doot block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyAirtightDoorBase">
            <summary>
            Describes interface for airtight doors (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyAirtightHangarDoor">
            <summary>
            Describes hangar door block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyAirtightSlideDoor">
            <summary>
            Describes air tight slide door block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyAssemblerMode">
            <summary>
            Determines what mode an assembler is in.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyAssemblerMode.Assembly">
            <summary>
            The assembler is currently set to assemble new items.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyAssemblerMode.Disassembly">
            <summary>
            The assembler is currently set to disassemble existing items.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyAssembler">
            <summary>
            Describes assembler block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyAssembler.DisassembleEnabled">
            <summary>
            Gets whether this assembler has disassemble mode enabled 
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyAssembler.CurrentProgress">
            <summary>
            Gets the progress for the item currently in production.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyAssembler.Mode">
            <summary>
            Gets or sets the current work mode of this assembly, whether it's assembling or disassembling.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyAssembler.CooperativeMode">
            <summary>
            Gets or sets whether this assembler should cooperate with other assemblers by adopting parts of
            their work queue.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyAssembler.Repeating">
            <summary>
            Gets or sets whether this assembler should be perpetually repeating its work queue.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyAttachableTopBlock">
            <summary>
            Describes rotor,piston or wheel suspension attachable block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyAttachableTopBlock.IsAttached">
            <summary>
            Gets whether the top part is attached to a base block
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyAttachableTopBlock.Base">
            <summary>
            Gets the attached base block
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.ChargeMode">
            <summary>
            Describes the charge mode of the battery block
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.ChargeMode.Auto">
            <summary>
            Automatic mode
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.ChargeMode.Recharge">
            <summary>
            Recharge only
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.ChargeMode.Discharge">
            <summary>
            Discharge only
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyBatteryBlock">
            <summary>
            Describes battery block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBatteryBlock.HasCapacityRemaining">
            <summary>
            Gets whether this battery block has any remaining capacity
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBatteryBlock.CurrentStoredPower">
            <summary>
            Gets current stored power
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBatteryBlock.MaxStoredPower">
            <summary>
            Gets maximum stored power
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBatteryBlock.CurrentInput">
            <summary>
            Gets current power input
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBatteryBlock.MaxInput">
            <summary>
            Gets current maximum power input
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBatteryBlock.IsCharging">
            <summary>
            Gets whether this battery block is charging
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBatteryBlock.ChargeMode">
            <summary>
            Gets or sets charge mode
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBatteryBlock.OnlyRecharge">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBatteryBlock.OnlyDischarge">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBatteryBlock.SemiautoEnabled">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyBeacon">
            <summary>
            Beacon block interface (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBeacon.Radius">
            <summary>
            Broadcasting range (read-only)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBeacon.HudText">
            <summary>
            Gets or sets the text to display on the HUD when the beacon is on.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyBlockGroup">
            <summary>
            Describes terminal block group (PB scripting interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyBlockGroup.GetBlocks(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.IMyTerminalBlock},System.Func{Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.Boolean})">
            <summary>
            Get terminal blocks which assigned to this group
            </summary>
            <param name="blocks">buffer array</param>
            <param name="collect">if function returns true, block would be added to <paramref name="blocks"/></param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyBlockGroup.GetBlocksOfType``1(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.IMyTerminalBlock},System.Func{Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.Boolean})">
            <summary>
            Get terminal blocks which assigned to this group, and matching type 
            </summary>
            <typeparam name="T">Block must be assignable from T</typeparam>
            <param name="blocks">buffer array</param>
            <param name="collect">if function returns true, block would be added to <paramref name="blocks"/></param>
            <exception cref="T:System.NullReferenceException">If function <paramref name="collect"/> returns true, and <paramref name="blocks"/> is null</exception>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyBlockGroup.GetBlocksOfType``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Get terminal blocks which assigned to this group, and matching type
            </summary>
            <typeparam name="T">Block must be assignable from T</typeparam>
            <param name="blocks">Buffer array that would receive results. It is cleared before call. Can be null</param>
            <param name="collect">if function returns true, block would be added to <paramref name="blocks"/></param>
            <exception cref="T:System.NullReferenceException">If function <paramref name="collect"/> returns true, and <paramref name="blocks"/> is null</exception>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBlockGroup.Name">
            <summary>
            Gets name of terminal blocks group 
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyCameraBlock">
            <summary>
            Describes Camera block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyCameraBlock.IsActive">
            <summary>
            Gets whether this camera is currently in use by at least one player.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyCameraBlock.AvailableScanRange">
            <summary>
            Gets the maximum distance that this camera can scan, based on the time since the last scan.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyCameraBlock.EnableRaycast">
            <summary>
            Gets or Sets whether the raycast is enabled.
            When this is true, the available raycast distance will count up, and power usage is increased.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyCameraBlock.RaycastConeLimit">
            <summary>
            Gets the maximum positive angle you can apply for pitch and yaw.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyCameraBlock.RaycastDistanceLimit">
            <summary>
            Gets the maximum distance you can request a raycast. -1 means infinite.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyCameraBlock.RaycastTimeMultiplier">
            <summary>
            Gets the raycast time multiplier that converts time in milliseconds to available raycast distance in meters.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyCameraBlock.Raycast(System.Double,System.Single,System.Single)">
            <summary>
            Does a raycast in the direction the camera is facing.
            </summary>
            <param name="distance">distance in meters</param>
            <param name="pitch">pitch in degrees</param>
            <param name="yaw">yaw in degrees</param>
            <returns>Empty if distance or angle are out of bounds.</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyCameraBlock.Raycast(VRageMath.Vector3D)">
            <summary>
            Does a raycast to the specific target point.         
            </summary>
            <param name="targetPos">target position</param>
            <returns>Empty if distance or angle are out of bounds.</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyCameraBlock.Raycast(System.Double,VRageMath.Vector3D)">
            <summary>
            Does a raycast in the given direction (in camera local space).        
            </summary>
            <param name="distance">distance in meters</param>
            <param name="targetDirection">direction of the target</param>
            <returns>Empty if distance or angle are out of bounds.</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyCameraBlock.CanScan(System.Double)">
            <summary>
            Checks if the camera can scan the given distance.
            </summary>
            <param name="distance">distance in meters</param>
            <returns>true if camera can scan</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyCameraBlock.CanScan(System.Double,VRageMath.Vector3D)">
            <summary>
            Checks if the camera can scan to the given direction and distance (in camera local space).
            </summary>
            <param name="distance">distance in meters</param>
            <param name="direction">direction to the target</param>
            <returns>true if camera can scan</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyCameraBlock.CanScan(VRageMath.Vector3D)">
            <summary>
            Checks if the camera can scan to the given target
            </summary>
            <param name="target">target position</param>
            <returns>true if camera can scan</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyCameraBlock.TimeUntilScan(System.Double)">
            <summary>
            Calculates time until scan
            </summary>
            <param name="distance">distance in meters</param>
            <returns>number of milliseconds until the camera can do a raycast of the given distance</returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyCargoContainer">
            <summary>
            Describes cargo container block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyCockpit">
            <summary>
            Describes cockpit block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyCockpit.OxygenCapacity">
            <summary>
            Gets the maximum oxygen capacity of this cockpit.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyCockpit.OxygenFilledRatio">
            <summary>
            Gets the current oxygen level of this cockpit, as a value between 0 (empty) and 1 (full).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyCollector">
            <summary>
            Describes collector block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyCollector.UseConveyorSystem">
            <summary>
            Gets or sets whether this collector block should push out items from it
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyConveyor">
            <summary>
            Describes conveyor block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyConveyorSorterMode">
            <summary>
            Determines the current mode of a conveyor sorter.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyConveyorSorterMode.Whitelist">
            <summary>
            The items in the filter list are the only items allowed through this sorter.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyConveyorSorterMode.Blacklist">
            <summary>
            The items in the filter list are not allowed through this sorter.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyInventoryItemFilter">
            <summary>
            Implements inventory item filter
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyInventoryItemFilter.op_Implicit(VRage.Game.ModAPI.Ingame.MyItemType)~Sandbox.ModAPI.Ingame.MyInventoryItemFilter">
            <summary>
            Implements implicit operator
            </summary>
            <param name="itemType">item type</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyInventoryItemFilter.op_Implicit(VRage.Game.MyDefinitionId)~Sandbox.ModAPI.Ingame.MyInventoryItemFilter">
            <summary>
            Implements implicit operator
            </summary>
            <param name="definitionId">definition id</param>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyInventoryItemFilter.AllSubTypes">
            <summary>
            Determines whether all subtypes of the given item ID should pass this filter check.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyInventoryItemFilter.ItemId">
            <summary>
            Specifies an item to filter. Set <see cref="F:Sandbox.ModAPI.Ingame.MyInventoryItemFilter.AllSubTypes"/> to true to only check the main type part of this ID.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyInventoryItemFilter.ItemType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyInventoryItemFilter.#ctor(System.String,System.Boolean)">
            <summary>
            Implements MyInventoryItemFilter constructor
            </summary>
            <param name="itemId">item id</param>
            <param name="allSubTypes">true if all sub types</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyInventoryItemFilter.#ctor(VRage.Game.MyDefinitionId,System.Boolean)">
            <summary>
            Implements MyInventoryItemFilter constructor
            </summary>
            <param name="itemId">item id</param>
            <param name="allSubTypes">true if all sub types</param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyConveyorSorter">
            <summary>
            Describes conveyor sorter block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyConveyorSorter.DrainAll">
            <summary>
            Determines whether the sorter should drain any inventories connected to it and push them to the other side - as long
            as the items passes the filtering as defined by the filter list (<see cref="M:Sandbox.ModAPI.Ingame.IMyConveyorSorter.GetFilterList(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyInventoryItemFilter})"/>) and <see cref="P:Sandbox.ModAPI.Ingame.IMyConveyorSorter.Mode"/>.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyConveyorSorter.Mode">
            <summary>
            Determines the current mode of this sorter.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyConveyorSorter.GetFilterList(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyInventoryItemFilter})">
            <summary>
            Gets the items currently being allowed through or rejected, depending on the <see cref="P:Sandbox.ModAPI.Ingame.IMyConveyorSorter.Mode"/>.
            </summary>
            <param name="items">Buffer array, that would be cleared, and receive block filter settings</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyConveyorSorter.AddItem(Sandbox.ModAPI.Ingame.MyInventoryItemFilter)">
            <summary>
            Adds a single item to the filter list. See <see cref="M:Sandbox.ModAPI.Ingame.IMyConveyorSorter.SetFilter(Sandbox.ModAPI.Ingame.MyConveyorSorterMode,System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyInventoryItemFilter})"/> to change the filter mode and/or fill
            the entire list in one go.
            </summary>
            <param name="item">Item filter settings</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyConveyorSorter.RemoveItem(Sandbox.ModAPI.Ingame.MyInventoryItemFilter)">
            <summary>
            Removes a single item from the filter list. See <see cref="M:Sandbox.ModAPI.Ingame.IMyConveyorSorter.SetFilter(Sandbox.ModAPI.Ingame.MyConveyorSorterMode,System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyInventoryItemFilter})"/> to change the filter mode and/or clear
            the entire list in one go.
            </summary>
            <param name="item">Item filter settings</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyConveyorSorter.IsAllowed(VRage.Game.MyDefinitionId)">
            <summary>
            Determines whether a given item type is allowed go through the sorter, depending on the filter list (<see cref="M:Sandbox.ModAPI.Ingame.IMyConveyorSorter.GetFilterList(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyInventoryItemFilter})"/>) and <see cref="P:Sandbox.ModAPI.Ingame.IMyConveyorSorter.Mode"/>.
            </summary>
            <param name="id">Item id</param>
            <returns>Whether a given item type is allowed go through the sorter</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyConveyorSorter.SetFilter(Sandbox.ModAPI.Ingame.MyConveyorSorterMode,System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyInventoryItemFilter})">
            <summary>
            Changes the sorter to desired mode and filters the provided items. You can pass in <c>null</c> to empty the list.
            </summary>
            <param name="mode">New work mod</param>
            <param name="items">Replaces previous filter settings with this one</param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyConveyorTube">
            <summary>
            Describes conveyor tube block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyCryoChamber">
            <summary>
            Describes cryo chamber block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyDecoy">
            <summary>
            Describes decoy block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.DoorStatus">
            <summary>
            Describes the current status of the door.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.DoorStatus.Opening">
            <summary>
            The door is in the process of being opened.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.DoorStatus.Open">
            <summary>
            The door is fully open.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.DoorStatus.Closing">
            <summary>
            The door is in the process of being closed.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.DoorStatus.Closed">
            <summary>
            The door is fully closed.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyDoor">
            <summary>
            Describes door block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyDoor.Open">
            <summary>
            Indicates whether door is opened or closed. True when door is opened.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyDoor.Status">
            <summary>
            Determines the current general status of the door.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyDoor.OpenRatio">
            <summary>
            The current, accurate ratio of the door's current state where 0 is fully closed and 1 is fully open.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyDoor.OpenDoor">
            <summary>
            Opens the door. See <see cref="P:Sandbox.ModAPI.Ingame.IMyDoor.Status"/> to get the current status.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyDoor.CloseDoor">
            <summary>
            Closes the door. See <see cref="P:Sandbox.ModAPI.Ingame.IMyDoor.Status"/> to get the current status.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyDoor.ToggleDoor">
            <summary>
            Toggles the open state of this door. See <see cref="P:Sandbox.ModAPI.Ingame.IMyDoor.Status"/> to get the current status.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyExtendedPistonBase">
            <summary>
            Describes piston block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyFunctionalBlock">
            <summary>
            Describes functional block (block with Enabled/Disabled toggle) (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyFunctionalBlock.Enabled">
            <summary>
            Represents terminal gui toggle. Gets or sets if block is Enabled 
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyFunctionalBlock.RequestEnable(System.Boolean)">
            <summary>
            Obsolete
            </summary>
            <param name="enable"></param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo">
            <summary>
            Provides runtime info for a running grid program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.TimeSinceLastRun">
            <summary>
            Gets the time elapsed since the last time the Main method of this program was run. This property returns no
            valid data neither in the constructor nor the Save method.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.LastRunTimeMs">
            <summary>
            Gets the number of milliseconds it took to execute the Main method the last time it was run. This property returns no valid
            data neither in the constructor nor the Save method.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.MaxInstructionCount">
            <summary>
            Gets the maximum number of significant instructions that can be executing during a single run, including
            any other programmable blocks invoked immediately.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.CurrentInstructionCount">
            <summary>
            Gets the current number of significant instructions executed.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.MaxCallChainDepth">
            <summary>
            Gets the maximum number of method calls that can be nested into each other.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.CurrentCallChainDepth">
            <summary>
            Gets the current number of nested method calls.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.UpdateFrequency">
            <summary>
            Gets or sets how frequently this script will run itself
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem">
            <summary>
            Describes terminal system (PB scripting interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.GetBlocks(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.IMyTerminalBlock})">
            <summary>
            Fills the provided list with all the blocks reachable by this grid terminal system. This means all blocks on the same
            grid, or connected via rotors, pistons or connectors.
            
            </summary>
            <param name="blocks">A preallocated list to receive the blocks.</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.GetBlockGroups(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.IMyBlockGroup},System.Func{Sandbox.ModAPI.Ingame.IMyBlockGroup,System.Boolean})">
            <summary>
            Fills the provided list with the block groups reachable by this grid terminal system.
            </summary>
            <param name="blockGroups"></param>
            <param name="collect">Provide a filter method to determine if a given group should be added or not.</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.GetBlocksOfType``1(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.IMyTerminalBlock},System.Func{Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.Boolean})">
            <summary>
            Fills the provided list with the blocks reachable by this grid terminal system. This means all blocks on the same
            grid, or connected via rotors, pistons or connectors.
            </summary>
            <typeparam name="T">The type of blocks to retrieve.</typeparam>
            <param name="blocks">A preallocated list to receive the blocks.</param>
            <param name="collect">Provide a filter method to determine if a given group should be added or not.</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.GetBlocksOfType``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Fills the provided list with the blocks reachable by this grid terminal system. This means all blocks on the same
            grid, or connected via rotors, pistons or connectors.
            </summary>
            <typeparam name="T">The type of blocks to retrieve.</typeparam>
            <param name="blocks">A preallocated list to receive the blocks.</param>
            <param name="collect">Provide a filter method to determine if a given group should be added or not.</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.SearchBlocksOfName(System.String,System.Collections.Generic.List{Sandbox.ModAPI.Ingame.IMyTerminalBlock},System.Func{Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.Boolean})">
            <summary>
            Fills the provided list with the blocks reachable by this grid terminal system. This means all blocks on the same
            grid, or connected via rotors, pistons or connectors. 
            </summary>
            <param name="name">The blocks must contain the given name in their name.</param>
            <param name="blocks">A preallocated list to receive the blocks.</param>
            <param name="collect">Provide a filter method to determine if a given group should be added or not.</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.GetBlockWithName(System.String)">
            <summary>
            Returns the first block found with the given name.
            </summary>
            <param name="name">The block must contain the given name in their name.</param>
            <returns>First found block with <c>name</c> or <c>null</c> if no block with that name can be found</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.GetBlockGroupWithName(System.String)">
            <summary>
            Returns the first block group found with the given name. Will return <c>null</c> if no block group with that name
            can be found.
            </summary>
            <param name="name">The block group must contain the given name in their name.</param>
            <returns>First found block group with <c>name</c> or <c>null</c> if no block group with that name can be found</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.GetBlockWithId(System.Int64)">
            <summary>
             Attempts to retrieve the block with the given entity ID.
            </summary>
            <param name="id">Entity Id</param>
            <returns>Block or <c>null</c> if no block with provided id found</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.CanAccess(Sandbox.ModAPI.Ingame.IMyTerminalBlock,Sandbox.ModAPI.Ingame.MyTerminalAccessScope)">
            <summary>
            Checks if the grid terminal system can still access the given <see cref="T:Sandbox.ModAPI.Ingame.IMyTerminalBlock"/>. A block is no longer
            accessible if it's destroyed, detached, it's ownership has changed or is otherwise disconnected from this grid terminal system.
            </summary>
            <param name="block">Block to test</param>
            <param name="scope">Type of access test</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.CanAccess(VRage.Game.ModAPI.Ingame.IMyCubeGrid,Sandbox.ModAPI.Ingame.MyTerminalAccessScope)">
            <summary>
            Checks if the grid terminal system can still access the given <see cref="T:VRage.Game.ModAPI.Ingame.IMyCubeGrid"/>. A grid is no longer accessible
            if it's destroyed, detached, it's ownership has changed or is otherwise disconnected from this grid terminal system.
            </summary>
            <param name="grid">Grid to check</param>
            <param name="scope">Type of access check</param>
            <returns>False if grid is <c>null</c>, closed or you can't access that grid</returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyGyro">
            <summary>
            Describes gyroscope block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGyro.GyroPower">
            <summary>
            Get or set gyroscope power in 
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGyro.GyroOverride">
            <summary>
            Gets or set whether this gyro has enabled override
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGyro.Yaw">
            <summary>
            Gets or sets the yaw angle
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGyro.Pitch">
            <summary>
            Gets or set the pitch angle
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGyro.Roll">
            <summary>
            Gets or set the roll angle
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyIntergridCommunicationSystem">
            <summary>
            This is the entry point for all communication operations.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyIntergridCommunicationSystem.Me">
            <summary>
            Gets communication address for current programmable block.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyIntergridCommunicationSystem.UnicastListener">
            <summary>
            Gets unicast listener for current programmable block.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyIntergridCommunicationSystem.IsEndpointReachable(System.Int64,Sandbox.ModAPI.Ingame.TransmissionDistance)">
            <summary>
            Determines if given endpoint is currently reachable. Similar to sending ICMP message.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyIntergridCommunicationSystem.RegisterBroadcastListener(System.String)">
            <summary>
            Registers broadcast listener with given tag for current programmable block. 
            In case there is already another active broadcast lister with given tag new listener is NOT registered and the already active one is returned instead.
            </summary>
            <param name="tag">String tag broadcast listener should listen for.</param>
            <returns>Active broadcast listener for given tag.</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyIntergridCommunicationSystem.DisableBroadcastListener(Sandbox.ModAPI.Ingame.IMyBroadcastListener)">
            <summary>
            Disables given broadcast listener. In case given broadcast listener is not active nothing happens.
            Instance of this broadcast listener remains valid and all pending messages may be accepted as normal.
            Disabling broadcast listener also disables it's message callback, if active.
            Consuming the last pending message will permanently disable the provided listener and it's never going to be activated again.
            ==> Registering new broadcast lister with the same tag will allocate new listener instance instead.
            </summary>
            <param name="broadcastListener">Broadcast listener which should be deactivated.</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyIntergridCommunicationSystem.GetBroadcastListeners(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.IMyBroadcastListener},System.Func{Sandbox.ModAPI.Ingame.IMyBroadcastListener,System.Boolean})">
            <summary>
            Retrieves list of all active broadcast listeners and listeners with pending messages, registered by current programmable block.
            Returned list is snapshot of current state and is not updated by future operations.
            </summary>
            <returns>List or all active broadcast listeners and listeners with pending messages.</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyIntergridCommunicationSystem.SendBroadcastMessage``1(System.String,``0,Sandbox.ModAPI.Ingame.TransmissionDistance)">
            <summary>
            Sends broadcast message with given content and tag. 
            This is fire and forget operation and cannot fail.
            Only broadcast listeners listening to this tag will accept this message.
            Important: Message will be delivered only to currently reachable IGC endpoints.
            </summary>
            <param name="data">Message data to be send.</param>
            <param name="tag">Tag of broadcast listeners this message should be accepted by.</param>
            <param name="transmissionDistance">Specifies how far will the be broadcasted</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyIntergridCommunicationSystem.SendUnicastMessage``1(System.Int64,System.String,``0)">
            <summary>
            Sends unicast message with given content to the PB with specified address.
            This operation may fail in case the given IGC endpoint is currently unreachable.
            </summary>
            <param name="data">Message data to be send.</param>
            <param name="tag">Tags the message type so that the receiving party has easier time recognizing the message</param>
            <param name="addressee">IGC endpoint to send this message to.</param>
            <returns>True if successfully sent</returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.TransmissionDistance">
            <summary>
            Specifies how far should be broadcasted message.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.TransmissionDistance.CurrentConstruct">
            <summary>
            All PBs on single ship
            For more info on constructs see <see cref="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.IsSameConstructAs(Sandbox.ModAPI.Ingame.IMyTerminalBlock)"/>
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.TransmissionDistance.ConnectedConstructs">
            <summary>
            All PBs on physically connected ships
            For more info on constructs see <see cref="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.IsSameConstructAs(Sandbox.ModAPI.Ingame.IMyTerminalBlock)"/>
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.TransmissionDistance.AntennaRelay">
            <summary>
            All PBs connected over antenna relay
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.TransmissionDistance.TransmissionDistanceMax">
            <summary>
            Max Distance 
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyIGCMessage">
            <summary>
            Provides info about received message along with received data
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyIGCMessage.Data">
            <summary>
            The data received in message.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyIGCMessage.Tag">
            <summary>
            Tag designing type of this message.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyIGCMessage.Source">
            <summary>
            Source/Author of this message.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyIGCMessage.#ctor(System.Object,System.String,System.Int64)">
            <summary>
            Implements MyIGCMessage constructor
            </summary>
            <param name="data">data</param>
            <param name="tag">tag</param>
            <param name="source">source</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyIGCMessage.As``1">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyMessageProvider">
            <summary>
            Base interface for all message providers.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMessageProvider.HasPendingMessage">
            <summary>
            Determines whether there is a message pending to be accepted in this message provider or not.
            There may be multiple messages pending in single message provider. In such case the flag will stay raised until the last message is consumed.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMessageProvider.MaxWaitingMessages">
            <summary>
            Indicates number of max messages waiting in queue before the oldest one will be dropped to make space for new one.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyMessageProvider.AcceptMessage">
            <summary>
            Accepts first message from pending message queue for this message provider.
            Messages are guaranteed to be dequeued and returned by this method in order they arrived.
            </summary>
            <returns>First message from pending message queue, default(<see cref="T:Sandbox.ModAPI.Ingame.MyIGCMessage"/>) if there are no messages pending to be accepted.</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyMessageProvider.DisableMessageCallback">
            <summary>
            Disables registered message callback.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyMessageProvider.SetMessageCallback(System.String)">
            <summary>
            Whenever given message provider obtains new message respective programmable block gets called with provided argument.
            Each raised callback argument will be called only once per simulation tick no matter how many messages are there pending to be accepted.
            At most a single callback will be invoked each tick
            ==> If there are messages pending in multiple message providers with registered callback, one will be randomly picked and invoked. Rest will be deferred to the next tick and follow the same process.
            In case you don't consume all messages pending in given message provider, the callback will not be raise again in following tick unless new message arrives.
            </summary>
            <param name="argument"></param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyBroadcastListener">
            <summary>
            Broadcast listeners scan the network for broadcasted messages with specific tag.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBroadcastListener.Tag">
            <summary>
            Gets the tag this broadcast listener is listening for.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyBroadcastListener.IsActive">
            <summary>
            Gets a value that indicates whether the broadcast listener is active.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyUnicastListener">
            <summary>
            Unicast listener hooks up all messages addressed directly to this endpoint.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyJumpDriveStatus">
            <summary>
            Describes jump drive status
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyJumpDriveStatus.Charging">
            <summary>
            Charging
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyJumpDriveStatus.Ready">
            <summary>
            Ready
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyJumpDriveStatus.Jumping">
            <summary>
            Jumping
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyJumpDrive">
            <summary>
            Describes jump drive block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyJumpDrive.CurrentStoredPower">
            <summary>
            Gets block stored power
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyJumpDrive.MaxStoredPower">
            <summary>
            Gets block max stored power
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyJumpDrive.Status">
            <summary>
            Gets block status 
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyJumpDrive.JumpDistanceRatio">
            <summary>
            Gets or sets jump drive distance ratio, value from 0 to 1.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyJumpDrive.JumpDistanceMeters">
            <summary>
            Gets or sets jump drive distance in meters.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyJumpDrive.MaxJumpDistanceMeters">
            <summary>
            Gets maximum jump drive distance.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyJumpDrive.MinJumpDistanceMeters">
            <summary>
            Gets minimum jump drive distance.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyJumpDrive.Recharge">
            <summary>
            Turns on/off recharging
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyLargeTurretBase">
            <summary>
            Describes turret block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.IsUnderControl">
            <summary>
            Indicates whether a block is locally or remotely controlled.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.CanControl">
            <summary>
            Returns true if current player can control this block.
            Always return false on Dedicated Server
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.Range">
            <summary>
            Gets and Sets shooting range of the turret
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.IsAimed">
            <summary>
            Returns true if turret head looking at target
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TrackTarget(VRageMath.Vector3D,VRageMath.Vector3)">
            <summary>
            Tracks given target with enabled position prediction
            </summary>
            <param name="pos">Position of turret</param>
            <param name="velocity">Velocity of target</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SetTarget(VRageMath.Vector3D)">
            <summary>
            Set targets given position
            </summary>
            <param name="pos">Target world coordinates</param>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.HasTarget">
            <summary>
            Checks if the turret is locked onto a target
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.Elevation">
            <summary>
            Gets / sets elevation of turret, this method is not synced, you need to sync elevation manually
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SyncElevation">
            <summary>
            Method used to sync elevation of turret, you need to call it to sync elevation for other clients/server
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.Azimuth">
            <summary>
            Gets or sets azimuth of turret, this method is not synced, you need to sync azimuth manually
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SyncAzimuth">
            <summary>
            Method used to sync azimuth, you need to call it to sync azimuth for other clients/server
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.EnableIdleRotation">
            <summary>
            Enable/disable idle rotation for turret, this method is not synced, you need to sync manually
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SyncEnableIdleRotation">
            <summary>
            Method used to sync idle rotation and elevation, you need to call it to sync rotation and elevation for other clients/server
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.AIEnabled">
            <summary>
            Checks is AI is enabled for turret
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.ResetTargetingToDefault">
            <summary>
            Resets targeting to default values
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.GetTargetedEntity">
            <summary>
            Gets the turret's current detected entity, if any
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TargetMeteors">
            <summary>
            Gets/sets if the turret should target meteors.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TargetMissiles">
            <summary>
            Gets/sets if the turret should target missiles.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TargetSmallGrids">
            <summary>
            Gets/sets if the turret should target small grids.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TargetLargeGrids">
            <summary>
            Gets/sets if the turret should target large grids.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TargetCharacters">
            <summary>
            Gets/sets if the turret should target characters.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TargetStations">
            <summary>
            Gets/sets if the turret should target stations.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TargetNeutrals">
            <summary>
            Gets/sets if the turret should target neutrals.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TargetEnemies">
            <summary>
            Gets/sets if the turret should target enemies.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.GetTargetingGroups">
            <summary>
            Gets all available targeting groups 
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.GetTargetingGroup">
            <summary>
            Gets current targeting group
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SetTargetingGroup(System.String)">
            <summary>
            Sets current targeting group
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SetManualAzimuthAndElevation(System.Single,System.Single)">
            <summary>
            Sets azimuth and elevation of the turret, this method is not synced, you need to sync it manually. Call SyncAzimuth or SyncElevation.
            </summary>
            <param name="azimuth">azimuth value</param>
            <param name="elevation">elevation value</param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyLaserAntennaStatus">
            <summary>
            Describes the current status of a laser antenna.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyLaserAntennaStatus.Idle">
            <summary>
            Not doing anything and not connected.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyLaserAntennaStatus.RotatingToTarget">
            <summary>
            Currently rotating towards the currently selected target.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyLaserAntennaStatus.SearchingTargetForAntenna">
            <summary>
            Currently searching for a laser antenna at the target.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyLaserAntennaStatus.Connecting">
            <summary>
            Currently connecting to a laser antenna.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyLaserAntennaStatus.Connected">
            <summary>
            Currently connected to a laser antenna.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyLaserAntennaStatus.OutOfRange">
            <summary>
            The target antenna is out of range.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyLaserAntenna">
            <summary>
            Laser antenna block interface
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLaserAntenna.RequireLoS">
            <summary>
            Determines whether this particular antenna requires line of sight to function.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLaserAntenna.TargetCoords">
            <summary>
            Gets target coordinates
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLaserAntenna.SetTargetCoords(System.String)">
            <summary>
            Sets coordinates of target
            </summary>
            <param name="coords">GPS coordinates string</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLaserAntenna.Connect">
            <summary>
            Connect to target defined by SetTargetCoords
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLaserAntenna.IsPermanent">
            <summary>
            Gets or sets whether connection is permanent
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLaserAntenna.IsOutsideLimits">
            <summary>
            Target is outside movement limits of antenna
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLaserAntenna.Status">
            <summary>
            Gets the current status of this antenna.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLaserAntenna.Range">
            <summary>
            Gets or sets the max range of the laser set in terminal
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyLightingBlock">
            <summary>
            Describes lighting block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLightingBlock.Radius">
            <summary>
            Gets or sets the basic radius of the light.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLightingBlock.ReflectorRadius">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLightingBlock.Intensity">
            <summary>
            Gets or sets the current intensity of the light.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLightingBlock.Falloff">
            <summary>
            Gets or sets the current falloff of the light.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLightingBlock.BlinkIntervalSeconds">
            <summary>
            Gets or sets the blinking interval of this light (in seconds).
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLightingBlock.BlinkLenght">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLightingBlock.BlinkLength">
            <summary>
            Gets or sets how much of the blinking interval should be spent with the light on, as a value between 0 and 1.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLightingBlock.BlinkOffset">
            <summary>
            Adds an offset to the blinking interval, as a value between 0 and 1.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLightingBlock.Color">
            <summary>
            Gets or sets the color of the light.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock">
            <summary>
            Describes blocks linked with <see cref="F:VRage.Game.ModAPI.GridLinkTypeEnum.Mechanical"/> connection (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.TopGrid">
            <summary>
            Gets the grid of the attached top part
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.Top">
            <summary>
            Gets the attached top part entity
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.SafetyLockSpeed">
            <summary>
            Gets or sets the speed at which this device will engage it's safety lock (<see cref="P:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.IsLocked"/>).
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.SafetyLock">
            <summary>
            Gets if the block is safety locked (welded)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.IsAttached">
            <summary>
            Gets if the block base is attached to something
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.IsLocked">
            <summary>
            Gets if the block is safety locked (welded)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.PendingAttachment">
            <summary>
            Gets if the block is looking for a top part
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.Attach">
            <summary>
            Attaches a nearby top part to the block
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock.Detach">
            <summary>
            Detaches the top from the base
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyMotorAdvancedRotor">
            <summary>
            Describes advanced motor rotor (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyMotorAdvancedStator">
            <summary>
            Describes advanced motor stator (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyMotorBase">
            <summary>
            Describes base class for motor, advanced rotor and motor suspension block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyMotorRotor">
            <summary>
            Describes motor rotor (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyMotorStator">
            <summary>
            Describes motor stator block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.Angle">
            <summary>
            Gets the current angle of the rotor in radians.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.Torque">
            <summary>
            Gets or sets the torque applied when moving the rotor top
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.BrakingTorque">
            <summary>
            Gets or sets the torque applied when stopping the rotor top
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.TargetVelocityRad">
            <summary>
            Gets or sets the desired velocity of the rotor in radians/second
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.TargetVelocityRPM">
            <summary>
            Gets or sets the desired velocity of the rotor in RPM
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.LowerLimitRad">
            <summary>
            Gets or sets the lower angle limit of the rotor in radians. Set to float.MinValue for no limit.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.LowerLimitDeg">
            <summary>
            Gets or sets the lower angle limit of the rotor in degrees. Set to float.MinValue for no limit.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.UpperLimitRad">
            <summary>
            Gets or sets the upper angle limit of the rotor in radians. Set to float.MaxValue for no limit.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.UpperLimitDeg">
            <summary>
            Gets or sets the upper angle limit of the rotor in degrees. Set to float.MaxValue for no limit.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.Displacement">
            <summary>
            Gets or sets the vertical displacement of the rotor top
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorStator.RotorLock">
            <summary>
            Gets or sets rotor lock
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyMotorSuspension">
            <summary>
            Describes wheel suspension (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.Steering">
            <summary>
            Gets or sets whether suspension can steer
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.Propulsion">
            <summary>
            Gets or sets whether suspension has enabled propulsion 
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.InvertSteer">
            <summary>
            Gets or sets whether suspension steering is inverted
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.InvertPropulsion">
            <summary>
            Gets or sets whether suspension propulsion is inverted
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.IsParkingEnabled">
            <summary>
            Gets or sets whether suspension reacts on parking break
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.Damping">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.Strength">
            <summary>
            Gets or sets whether suspension strength [0..100]%
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.Friction">
            <summary>
            Gets or sets whether suspension friction [0..100]%
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.Power">
            <summary>
            Gets or sets whether suspension power [0..100]%
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.Height">
            <summary>
            Gets or sets whether suspension height in meters. Limited with block definition settings
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.SteerAngle">
            <summary>
            Gets suspension current steering angle
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.MaxSteerAngle">
            <summary>
            Gets or sets max steering angle in radians.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.SteerSpeed">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.SteerReturnSpeed">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.SuspensionTravel">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.Brake">
            <summary>
            Gets or sets if brakes are applied to the wheel. This is not a brake override.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.AirShockEnabled">
            <summary>
            Enables or disables AirShock function.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.SteeringOverride">
            <summary>
            Steering override proportion, value from -1 to 1.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.PropulsionOverride">
            <summary>
            Propulsion override proportion, value from -1 to 1.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyOreDetector">
            <summary>
            Describes ore detector block (PB scripting interface)(mods interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyOreDetector.Range">
            <summary>
            Gets ore detection range in meters
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyOreDetector.BroadcastUsingAntennas">
            <summary>
            Gets or sets whether block should use antennas to broadcast ore deposits
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyGasGenerator">
            <summary>
            Describes Gas generator interface (H2/O2 block) (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGasGenerator.AutoRefill">
            <summary>
            Gets or sets bottles auto refill enabled
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGasGenerator.UseConveyorSystem">
            <summary>
            Gets or sets whether block can use conveyor system (pull ice and hydrogen/oxygen bottles)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyOxygenGenerator">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyGasTank">
            <summary>
            Describes gas tank block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGasTank.Stockpile">
            <summary>
            Gets or sets the stockpiling option for this gas tank. When stockpile is on, the
            tank will only allow itself to be filled, it will not release any gas.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGasTank.AutoRefillBottles">
            <summary>
            Gets or sets whether storage bottles will be filled automatically when placed within
            this tank.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGasTank.Capacity">
            <summary>
            Gets the gas capacity of this tank.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGasTank.FilledRatio">
            <summary>
            Gets the current fill level of this tank as a value between 0 (empty) and 1 (full).
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyGasTank.RefillBottles">
            <summary>
            Refills any stored storage bottles.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyOxygenTank">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyOxygenTank.GetOxygenLevel">
            <summary>
            Obsolete
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyPassage">
            <summary>
            Describes passage block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyPistonBase">
            <summary>
            Describes piston block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.Velocity">
            <summary>
            Gets or sets the velocity of the piston as it extends or retracts. This value can be between negative and positive <see cref="P:Sandbox.ModAPI.Ingame.IMyPistonBase.MaxVelocity"/>.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.MaxVelocity">
            <summary>
            Gets the maximum velocity this piston is capable of moving at.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.MinLimit">
            <summary>
            Gets or sets the minimum position the piston can retract to. See <see cref="P:Sandbox.ModAPI.Ingame.IMyPistonBase.LowestPosition"/> and <see cref="P:Sandbox.ModAPI.Ingame.IMyPistonBase.HighestPosition"/> for the limits of this value.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.MaxLimit">
            <summary>
            Gets or sets the maximum position the piston can extend to. See <see cref="P:Sandbox.ModAPI.Ingame.IMyPistonBase.LowestPosition"/> and <see cref="P:Sandbox.ModAPI.Ingame.IMyPistonBase.HighestPosition"/> for the limits of this value.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.LowestPosition">
            <summary>
            Gets the lowest position the piston is capable of moving to.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.HighestPosition">
            <summary>
            Gets the highest position the piston is capable of moving to.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.CurrentPosition">
            <summary>
            Gets the current position of the piston head relative to the base.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.Status">
            <summary>
            Gets the current status.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyPistonBase.Extend">
            <summary>
            Extends the piston.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyPistonBase.Retract">
            <summary>
            Retracts the piston.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyPistonBase.Reverse">
            <summary>
            Reverses the direction of the piston.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyPistonTop">
            <summary>
            Describes piston top block (movable part) (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyPowerProducer">
            <summary>
            Describes power producer block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPowerProducer.CurrentOutput">
            <summary>
            Gets current output in Megawatts
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPowerProducer.MaxOutput">
            <summary>
            Gets maximum output in Megawatts
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyProductionItem">
            <summary>
            Implements production block item
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyProductionItem.Amount">
            <summary>
            Gets or sets the amount
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyProductionItem.BlueprintId">
            <summary>
            Gets or sets the blueprint id
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyProductionItem.ItemId">
            <summary>
            Gets or sets the item id
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyProductionItem.#ctor(System.UInt32,VRage.Game.MyDefinitionId,VRage.MyFixedPoint)">
            <summary>
            Implements MyProductionItem constructor
            </summary>
            <param name="itemId">item id</param>
            <param name="blueprintId">blueprint id</param>
            <param name="amount">amout</param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyProductionBlock">
            <summary>
            Describes production block (assembler/refinery/survival kit) (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProductionBlock.InputInventory">
            <summary>
            Gets the input inventory.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProductionBlock.OutputInventory">
            <summary>
            Gets the output inventory.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProductionBlock.IsProducing">
            <summary>
            Gets whether block is currently producing.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProductionBlock.IsQueueEmpty">
            <summary>
            Gets whether production queue is empty.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.MoveQueueItemRequest(System.UInt32,System.Int32)">
            <summary>
            Moves an item in the queue to a target position in the queue.
            </summary>
            <param name="queueItemId">Finds item by queue item id</param>
            <param name="targetIdx">Target position in queue</param>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProductionBlock.NextItemId">
            <summary>
            Gets the queue item ID of the next item to be produced.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProductionBlock.UseConveyorSystem">
            <summary>
            Gets or sets whether this device should use the conveyor system to retrieve and store items.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.CanUseBlueprint(VRage.Game.MyDefinitionId)">
            <summary>
            Can this production block produce this blueprint?
            </summary>
            <param name="blueprint">A MyDefinitionId that names the blueprint</param>
            <returns>True if production block can use blueprint</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.AddQueueItem(VRage.Game.MyDefinitionId,VRage.MyFixedPoint)">
            <summary>
            Adds a blueprint to the production queue
            </summary>
            <param name="blueprint">A MyDefinitionId that names the blueprint</param>
            <param name="amount">Amount of items</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.AddQueueItem(VRage.Game.MyDefinitionId,System.Decimal)">
            <summary>
            Adds a blueprint to the production queue
            </summary>
            <param name="blueprint">A MyDefinitionId that names the blueprint</param>
            <param name="amount">Amount of items</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.AddQueueItem(VRage.Game.MyDefinitionId,System.Double)">
            <summary>
            Adds a blueprint to the production queue
            </summary>
            <param name="blueprint">A MyDefinitionId that names the blueprint</param>
            <param name="amount">Amount of items</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.InsertQueueItem(System.Int32,VRage.Game.MyDefinitionId,VRage.MyFixedPoint)">
            <summary>
            Inserts a blueprint into the production queue
            </summary>
            <param name="idx">Index of the item</param>
            <param name="blueprint">A MyDefinitionId that names the blueprint</param>
            <param name="amount">Amount of items</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.InsertQueueItem(System.Int32,VRage.Game.MyDefinitionId,System.Decimal)">
            <summary>
            Inserts a blueprint into the production queue
            </summary>
            <param name="idx">Index of the item</param>
            <param name="blueprint">A MyDefinitionId that names the blueprint</param>
            <param name="amount">Amount of items</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.InsertQueueItem(System.Int32,VRage.Game.MyDefinitionId,System.Double)">
            <summary>
            Inserts a blueprint into the production queue
            </summary>
            <param name="idx">Index of the item</param>
            <param name="blueprint">A MyDefinitionId that names the blueprint</param>
            <param name="amount">Amount of items</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.RemoveQueueItem(System.Int32,VRage.MyFixedPoint)">
            <summary>
            Removes an item from the queue
            </summary>
            <param name="idx">Index of the item</param>
            <param name="amount">Amount to remove</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.RemoveQueueItem(System.Int32,System.Decimal)">
            <summary>
            Removes an item from the queue
            </summary>
            <param name="idx">Index of the item</param>
            <param name="amount">Amount to remove</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.RemoveQueueItem(System.Int32,System.Double)">
            <summary>
            Removes an item from the queue
            </summary>
            <param name="idx">Index of the item</param>
            <param name="amount">Amount to remove</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.ClearQueue">
            <summary>
            Clears the Queue
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProductionBlock.GetQueue(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyProductionItem})">
            <summary>
            Gets the current production queue
            </summary>
            <returns>List of MyProductionQueueItems</returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.UpdateFrequency">
            <summary>
            Flags set how often the script will run itself.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateFrequency.None">
            <summary>
            Does not run autonomously.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateFrequency.Update1">
            <summary>
            Run every game tick.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateFrequency.Update10">
            <summary>
            Run every 10th game tick.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateFrequency.Update100">
            <summary>
            Run every 100th game tick.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateFrequency.Once">
            <summary>
            Run once before the next tick. Flag is un-set automatically after the update
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.UpdateType">
            <summary>
            Enum describes what source triggered the script to run.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateType.Terminal">
            <summary>
            Script run by user in the terminal.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateType.Trigger">
            <summary>
            Script run by a block such as timer, sensor.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateType.Mod">
            <summary>
            Script run by a mod.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateType.Script">
            <summary>
            Script run by another programmable block.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateType.Update1">
            <summary>
            Script is updating every tick.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateType.Update10">
            <summary>
            Script is updating every 10th tick.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateType.Update100">
            <summary>
            Script is updating every 100th tick.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateType.Once">
            <summary>
            Script is updating once before the tick.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.UpdateType.IGC">
            <summary>
            Script run by intergrid communication system.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyProgrammableBlock">
            <summary>
            Describes programmable block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProgrammableBlock.IsRunning">
            <summary>
            Get whether this programmable block is currently running its program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProgrammableBlock.TerminalRunArgument">
            <summary>
            Get default terminal argument.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProgrammableBlock.TryRun(System.String)">
            <summary>
            Attempts to run this programmable block using the given argument. An already running
            programmable block cannot be run again.
            This is equivalent to running <c>block.ApplyAction("Run", argumentsList);</c>
            This should be called from an ingame script. Do not use in mods.
            </summary>
            <param name="argument"></param>
            <returns><c>true</c> if the action was applied, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyProjector">
            <summary>
            Describes projector block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.ProjectionOffsetX">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.ProjectionOffsetY">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.ProjectionOffsetZ">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.ProjectionRotX">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.ProjectionRotY">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.ProjectionRotZ">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.IsProjecting">
            <summary>
            Checks if there is an active projection
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.TotalBlocks">
            <summary>
            Gets total number of blocks in the projection
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.RemainingBlocks">
            <summary>
            Gets number of blocks left to be welded
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.RemainingBlocksPerType">
            <summary>
            Gets comprehensive list of blocks left to be welded
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.RemainingArmorBlocks">
            <summary>
            Get number of armor blocks left to be welded
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.BuildableBlocksCount">
            <summary>
            Get count of blocks which can be welded now
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.ProjectionOffset">
            <summary>
            Gets or sets projection offset
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.ProjectionRotation">
            <summary>
            Get or sets projection rotation. These values are not in degrees. 1 = 90 degrees, 2 = 180 degrees
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProjector.UpdateOffsetAndRotation">
            <summary>
            Call this after setting ProjectionOffset and ProjectionRotation to update the projection
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProjector.ShowOnlyBuildable">
            <summary>
            Gets or set should projection show only buildable blocks
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyTransmitTarget">
            <summary>
            Describes transmit target flags
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyTransmitTarget.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyTransmitTarget.Owned">
            <summary>
            Owned
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyTransmitTarget.Ally">
            <summary>
            Ally
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyTransmitTarget.Neutral">
            <summary>
            Neutral
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyTransmitTarget.Enemy">
            <summary>
            Enemy
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyTransmitTarget.Everyone">
            <summary>
            All types
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyTransmitTarget.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyRadioAntenna">
            <summary>
            Describes antenna block interface (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRadioAntenna.Radius">
            <summary>
            Gets or sets Broadcasting/Receiving range
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRadioAntenna.ShowShipName">
            <summary>
            Gets or sets show ship name on hud
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRadioAntenna.IsBroadcasting">
            <summary>
            Returns true if antenna is broadcasting
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRadioAntenna.EnableBroadcasting">
            <summary>
            Gets or sets if broadcasting is enabled
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRadioAntenna.HudText">
            <summary>
            Gets or sets text displayed in the spawn menu
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyReactor">
            <summary>
            Describes reactor block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyReactor.UseConveyorSystem">
            <summary>
            Gets or sets whether this reactor block should pull items from conveyor system
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyRefinery">
            <summary>
            Describes assembler block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyReflectorLight">
            <summary>
            Describes spotlight block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.FlightMode">
            <summary>
            Describes flight mode
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.FlightMode.Patrol">
            <summary>
            Patrol
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.FlightMode.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.FlightMode.OneWay">
            <summary>
            One Way
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyWaypointInfo">
            <summary>
            Represents a GPS coordinate
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyWaypointInfo.Empty">
            <summary>
            Returns an empty (undefined) GPS coordinate
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyWaypointInfo.FindAll(System.String,System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyWaypointInfo})">
            <summary>
            Searches for all GPS coordinates in the given text.
            </summary>
            <param name="source"></param>
            <param name="gpsList"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyWaypointInfo.TryParse(System.String,Sandbox.ModAPI.Ingame.MyWaypointInfo@)">
            <summary>
            <para>
            Attempts to parse a GPS coordinate from the given text. The text cannot contain anything but the GPS coordinate.
            </para>
            <para>
            A GPS coordinate has the format GPS:Name:X:Y:Z:
            </para>
            </summary>
            <param name="text"></param>
            <param name="gps"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyWaypointInfo.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new GPS coordinate
            </summary>
            <param name="name"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyWaypointInfo.#ctor(System.String,VRageMath.Vector3D)">
            <summary>
            Creates a new GPS coordinate
            </summary>
            <param name="name"></param>
            <param name="coords"></param>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyWaypointInfo.Name">
            <summary>
            The name of this GPS coordinate
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyWaypointInfo.Coords">
            <summary>
            Gets the target coordinate as a <see cref="T:VRageMath.Vector3D"/>
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyWaypointInfo.IsEmpty">
            <summary>
            Determines whether this coordinate is empty (undefined)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyWaypointInfo.ToString">
            <summary>
            Converts this GPS coordinate to its string equivalent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyWaypointInfo.Equals(Sandbox.ModAPI.Ingame.MyWaypointInfo)">
            <summary>
            Determines whether this coordinate is the same as another. Uses 0.0001 as the epsilon to counter floating point inaccuracies.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyWaypointInfo.Equals(Sandbox.ModAPI.Ingame.MyWaypointInfo,System.Double)">
            <summary>
            Determines whether this coordinate is the same as another. Uses 0.0001 as the epsilon to counter floating point inaccuracies.
            </summary>
            <param name="other"></param>
            <param name="epsilon">The epsilon (tolerance) of this comparison</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyWaypointInfo.Equals(System.Object)">
            <summary>
            Determines whether this coordinate is the same as another. Uses 0.0001 as the epsilon to counter floating point inaccuracies.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyWaypointInfo.GetHashCode">
            <summary>
            Gets the hashcode of this coordinate
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyRemoteControl">
            <summary>
            Describes remote control block (PB scripting interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyRemoteControl.GetNearestPlayer(VRageMath.Vector3D@)">
            <summary>
            Gets the nearest player's position. Will only work if the remote control belongs to an NPC
            </summary>
            <param name="playerPosition"></param>
            <returns>True if was able to get player position</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyRemoteControl.ClearWaypoints">
            <summary>
            Removes all existing waypoints.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyRemoteControl.GetWaypointInfo(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyWaypointInfo})">
            <summary>
            Gets basic information about the currently configured waypoints.
            </summary>
            <param name="waypoints">Buffer array, results would be added into it</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyRemoteControl.AddWaypoint(VRageMath.Vector3D,System.String)">
            <summary>
            Adds a new waypoint.
            </summary>
            <param name="coords">World position of waypoint</param>
            <param name="name">Name of waypoint</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyRemoteControl.AddWaypoint(Sandbox.ModAPI.Ingame.MyWaypointInfo)">
            <summary>
            Adds a new waypoint.
            </summary>
            <param name="coords">Waypoint info</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyRemoteControl.SetAutoPilotEnabled(System.Boolean)">
            <summary>
            Enables or disables the autopilot.
            </summary>
            <param name="enabled">Should be autopilot enabled or not</param>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRemoteControl.IsAutoPilotEnabled">
            <summary>
            Determines whether the autopilot is currently enabled.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyRemoteControl.SetCollisionAvoidance(System.Boolean)">
            <summary>
            Enables or disables collision avoidance.
            </summary>
            <param name="enabled">Should be collision avoidance enabled or not</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyRemoteControl.SetDockingMode(System.Boolean)">
            <summary>
            Enables or disables docking mode.
            </summary>
            <param name="enabled">Should be docking mode enabled or not</param>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRemoteControl.SpeedLimit">
            <summary>
            Gets or sets the autopilot speed limit
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRemoteControl.FlightMode">
            <summary>
            Gets or sets the current flight mode
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRemoteControl.Direction">
            <summary>
            Gets or sets the current flight direction
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRemoteControl.CurrentWaypoint">
            <summary>
            Gets the current target waypoint
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRemoteControl.WaitForFreeWay">
            <summary>
            if true, if collision avoidance is on, autopilot will wait until path is clear to move forward.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMySensorBlock">
            <summary>
            Describes sensor block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.MaxRange">
            <summary>
            Gets the maximum range of the sensor in any direction.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.LeftExtend">
            <summary>
            Gets or sets the left range of the sensor.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.RightExtend">
            <summary>
            Gets or sets the right range of the sensor.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.TopExtend">
            <summary>
            Gets or sets the top range of the sensor.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.BottomExtend">
            <summary>
            Gets or sets the bottom range of the sensor.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.FrontExtend">
            <summary>
            Gets or sets the front range of the sensor.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.BackExtend">
            <summary>
            Gets or sets the back range of the sensor.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.PlayProximitySound">
            <summary>
            Gets or sets if the proximity sound plays when an entity is detected.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectPlayers">
            <summary>
            Gets or sets if the sensor should detect players.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectFloatingObjects">
            <summary>
            Gets or sets if the sensor should detect floating objects (components, rocks).
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectSmallShips">
            <summary>
            Gets or sets if the sensor should detect small ships.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectLargeShips">
            <summary>
            Gets or sets if the sensor should detect large ships.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectStations">
            <summary>
            Gets or sets if the sensor should detect large stations.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectSubgrids">
            <summary>
            Gets or sets if the sensor should detect subgrids (eg. connected by connector).
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectAsteroids">
            <summary>
            Gets or sets if the sensor should detect asteroids or planets.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectOwner">
            <summary>
            Gets or sets if the sensor should detect the block owner.
            </summary>
            <remarks>Requires DetectPlayers set to <b>true</b>.</remarks>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectFriendly">
            <summary>
            Gets or sets if the sensor should detect friendly players.
            </summary>
            <remarks>Requires DetectPlayers set to <b>true</b>.</remarks>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectNeutral">
            <summary>
            Gets or sets if the sensor should detect neutral players.
            </summary>
            <remarks>Requires DetectPlayers set to <b>true</b>.</remarks>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectEnemy">
            <summary>
            Gets or sets if the sensor should detect enemy players.
            </summary>
            <remarks>Requires DetectPlayers set to <b>true</b>.</remarks>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.IsActive">
            <summary>
            Gets if there is any entity currently being detected.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.LastDetectedEntity">
            <summary>
            Gets the last detected entity
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMySensorBlock.DetectedEntities(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyDetectedEntityInfo})">
            <summary>
            Gets the list of detected entities
            </summary>
            <param name="entities">return list of entities</param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyShipConnectorStatus">
            <summary>
            Describes the current status of the connector.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyShipConnectorStatus.Unconnected">
            <summary>
            This connector is not connected to anything, nor is it near anything connectable.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyShipConnectorStatus.Connectable">
            <summary>
            This connector is currently near something that it can connect to.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyShipConnectorStatus.Connected">
            <summary>
            This connector is currently connected to something.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyShipConnector">
            <summary>
            Describes connector block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipConnector.ThrowOut">
            <summary>
            Gets or sets whether this connector should throw out anything placed in its inventory.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipConnector.CollectAll">
            <summary>
            Gets or sets whether this connector should be pulling items into its inventory.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipConnector.PullStrength">
            <summary>
            Gets or sets the currently configured strength of the pull when the connector is within
            range of another.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipConnector.IsLocked">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipConnector.IsConnected">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipConnector.Status">
            <summary>
            Determines the current status of the connector.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipConnector.OtherConnector">
            <summary>
            Gets the connector this one is connected to when <see cref="P:Sandbox.ModAPI.Ingame.IMyShipConnector.Status"/> is <see cref="F:Sandbox.ModAPI.Ingame.MyShipConnectorStatus.Connected"/>.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipConnector.Connect">
            <summary>
            Attempts to connect. If <see cref="P:Sandbox.ModAPI.Ingame.IMyShipConnector.Status"/> is anything else but <see cref="F:Sandbox.ModAPI.Ingame.MyShipConnectorStatus.Connectable"/>, this method does nothing.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipConnector.Disconnect">
            <summary>
            Disconnects this connector.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipConnector.ToggleConnect">
            <summary>
            Toggles between <see cref="F:Sandbox.ModAPI.Ingame.MyShipConnectorStatus.Connected"/> and <see cref="F:Sandbox.ModAPI.Ingame.MyShipConnectorStatus.Unconnected"/>, depending on the current status.
            Another connector must be in range for this method to have any effect.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipConnector.IsParkingEnabled">
            <summary>
            Is this block triggered by the parking signal?
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyShipMass">
            <summary>
            Describes ship mass
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyShipMass.BaseMass">
            <summary>
            Gets the base mass of the ship.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyShipMass.TotalMass">
            <summary>
            Gets the total mass of the ship, including cargo.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyShipMass.PhysicalMass">
            <summary>
            Gets the physical mass of the ship, which accounts for inventory multiplier.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyShipMass.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Implements constructor of MyShipMass
            </summary>
            <param name="mass">mass</param>
            <param name="totalMass">total mass</param>
            <param name="physicalMass">physical mass</param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyPlanetElevation">
            <summary>
            Describes what detail level to retrieve the planet elevation for.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyPlanetElevation.Sealevel">
            <summary>
            Only return the distance to the planetary sealevel.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyPlanetElevation.Surface">
            <summary>
            Return the distance to the closest point of the planet. This is the same value
            displayed in the HUD.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyShipVelocities">
            <summary>
            Describes ship velocities
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyShipVelocities.LinearVelocity">
            <summary>
            Gets the ship's linear velocity (motion).
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyShipVelocities.AngularVelocity">
            <summary>
            Gets the ship's angular velocity (rotation).
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyShipVelocities.#ctor(VRageMath.Vector3D,VRageMath.Vector3D)">
            <summary>
            Implements MyShipVelocities constructor
            </summary>
            <param name="linearVelocity"></param>
            <param name="angularVelocity"></param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyShipController">
            <summary>
            Describes ship controller block (cockpit/remote control/cryopod) (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.CanControlShip">
            <summary>
            Determines whether this specific ship controller is capable of controlling the ship it's installed on.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.IsUnderControl">
            <summary>
            Indicates whether a block is locally or remotely controlled.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.HasWheels">
            <summary>
            Determines whether there are any wheels on this ship.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.ControlWheels">
            <summary>
            Gets or sets whether wheels are being controlled by this controller.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.ControlThrusters">
            <summary>
            Gets or sets whether thrusters are being controlled by this controller.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.HandBrake">
            <summary>
            Gets or sets the current state of the handbrake.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.DampenersOverride">
            <summary>
            Gets or sets whether dampeners are currently enabled.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.ShowHorizonIndicator">
            <summary>
            Gets or sets whether the horizon indicator should be displayed for this block.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipController.GetNaturalGravity">
            <summary>
            Gets the detected natural gravity vector and power at the current location.
            </summary>
            <returns>Natural gravity vector</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipController.GetArtificialGravity">
            <summary>
            Gets the detected artificial gravity vector and power at the current location.
            </summary>
            <returns>Artificial gravity vector</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipController.GetTotalGravity">
            <summary>
            Gets the total accumulated gravity vector and power at the current location, 
            taking both natural and artificial gravity into account.
            </summary>
            <returns>Total gravity vector</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipController.GetShipSpeed">
            <summary>
            Gets the basic ship speed in meters per second, for when you just need to know how fast you're going.
            </summary>
            <returns>Ship speed in meters per second</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipController.GetShipVelocities">
            <summary>
            Determines the linear velocities in meters per second and angular velocities in radians per second. 
            Provides a more accurate representation of the directions and axis speeds.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipController.CalculateShipMass">
            <summary>
            Gets information about the current mass of the ship.
            </summary>
            <returns>Ship mass information</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipController.TryGetPlanetPosition(VRageMath.Vector3D@)">
            <summary>
            Attempts to get the world position of the nearest planet. This method is only available when a ship is 
            within the gravity well of a planet.
            </summary>
            <param name="position">Position of closet planet or <see cref="F:VRageMath.Vector3.Zero"/></param>
            <returns>True if cockpit is in gravity of planet</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyShipController.TryGetPlanetElevation(Sandbox.ModAPI.Ingame.MyPlanetElevation,System.Double@)">
            <summary>
            Attempts to get the elevation of the ship in relation to the nearest planet. This method is only available
            when a ship is within the gravity well of a planet.
            </summary>
            <param name="detail">Mode </param>
            <param name="elevation"></param>
            <returns>True if cockpit is in planet gravity</returns>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.MoveIndicator">
            <summary>
            Directional input from user/autopilot. Values can be very large with high controller sensitivity
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.RotationIndicator">
            <summary>
            Pitch, yaw input from user/autopilot. Values can be very large with high controller sensitivity
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.RollIndicator">
            <summary>
            Roll input from user/autopilot. Values can be very large with high controller sensitivity
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.CenterOfMass">
            <summary>
            Center of mass in world coordinates
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.IsMainCockpit">
            <summary>
            Gets or sets if this controller is the main one for current ship
            Setter checks if there is any other main cockpit on the ship before proceeding
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyShipDrill">
            <summary>
            Describes ship drill block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyShipGrinder">
            <summary>
            Describes ship grinder block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyShipToolBase">
            <summary>
            Describes ship tool block (drill/grinder/welder) (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipToolBase.UseConveyorSystem">
            <summary>
            Gets or sets if block should push/pull items from conveyor system 
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipToolBase.IsActivated">
            <summary>
            True if the tool is activated by mouse click or toggling via terminal.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyShipWelder">
            <summary>
            Describes ship welder interface (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipWelder.HelpOthers">
            <summary>
            Gets and sets whether this welder can help other welders
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMySmallGatlingGun">
            <summary>
            Describes gatling gun (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySmallGatlingGun.UseConveyorSystem">
            <summary>
            Getter whether gatling gun can pull items from conveyor system
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMySmallMissileLauncher">
            <summary>
            Describes missile launcher block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySmallMissileLauncher.UseConveyorSystem">
            <summary>
            Getter whether missile launcher can pull items from conveyor system
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMySmallMissileLauncherReload">
            <summary>
            Describes reloadable missile block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyStoreInsertResults">
            <summary>
            Describes results of inserting order or offers into store block
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyStoreInsertResults.Success">
            <summary>
            Inserted successfuly 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyStoreInsertResults.Fail_StoreLimitReached">
            <summary>
            30 orders/offers Per player
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyStoreInsertResults.Fail_PricePerUnitIsLessThanMinimum">
            <summary>
            Too cheap
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyStoreInsertResults.Error">
            <summary>
            Other errors
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyStoreBlock">
            <summary>
            Describes store block (PB scripting interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyStoreBlock.InsertOffer(VRage.Game.ModAPI.Ingame.MyStoreItemDataSimple,System.Int64@)">
            <summary>
            Creates store item offer and returns its id.
            </summary>
            <param name="item">Data defining the store item.</param>
            <param name="id">Id of the item in the shop. (Ex. needed to remove the item)</param>
            <returns>Result of the creation of the store item.</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyStoreBlock.InsertOrder(VRage.Game.ModAPI.Ingame.MyStoreItemDataSimple,System.Int64@)">
            <summary>
            Creates store item  order and returns its id.
            </summary>
            <param name="item">Data defining the store item.</param>
            <param name="id">Id of the item in the shop. (Ex. needed to remove the item)</param>
            <returns>Result of the creation of the store item.</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyStoreBlock.CancelStoreItem(System.Int64)">
            <summary>
            Cancels the item (either order or offer).
            </summary>
            <param name="id">Id of the item to be canceled.</param>
            <returns>True if item was canceled</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyStoreBlock.GetPlayerStoreItems(System.Collections.Generic.List{Sandbox.ModAPI.Ingame.MyStoreQueryItem})">
            <summary>
            Returns player store items.
            </summary>
            <param name="storeItems">Returns items currently set in store.</param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyTargetDummyBlock">
            <summary>
            Describes target dummy block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyTerminalBlock">
            <summary>
            Describes terminal block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTerminalBlock.CustomName">
            <summary>
            Gets or sets how block is named in Terminal menu
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTerminalBlock.CustomNameWithFaction">
            <summary>
            Gets or sets how block is named in Terminal menu. Work only for Cockpit, LaserAntenna RadioAntenna, SpaceBall, Beacon
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTerminalBlock.DetailedInfo">
            <summary>
            Gets information about block status. In Control panel bottom right text
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTerminalBlock.CustomInfo">
            <summary>
            Gets information about block status (available from mods) <see cref="E:Sandbox.ModAPI.IMyTerminalBlock.AppendingCustomInfo"/> <see cref="M:Sandbox.ModAPI.IMyTerminalBlock.RefreshCustomInfo"/>. 
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTerminalBlock.CustomData">
            <summary>
            Gets or sets the Custom Data string.
            NOTE: Only use this for user input. For storing large mod configs, create your own MyModStorageComponent
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.HasLocalPlayerAccess">
            <summary>
            Returns if local player can use block. Executes <see cref="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.HasPlayerAccess(System.Int64,VRage.Game.MyRelationsBetweenPlayerAndBlock)"/> with local player identityId.
            On Dedicated Server as identityId it is using 0 as playerId
            </summary>
            <returns>Can player access this block or not. (Result of <see cref="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.HasPlayerAccess(System.Int64,VRage.Game.MyRelationsBetweenPlayerAndBlock)"/> function call)</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.HasPlayerAccess(System.Int64,VRage.Game.MyRelationsBetweenPlayerAndBlock)">
            <summary>
            Returns if local player can use block.
            It is also checking for admin access.
            </summary>
            <param name="playerId">PlayerId which you want check</param>
            <param name="defaultNoUser"></param>
            <returns>Can player access block or not</returns>
            <seealso cref="T:VRage.Game.MyRelationsBetweenPlayerAndBlock"/>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.SetCustomName(System.String)">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.SetCustomName(System.Text.StringBuilder)">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTerminalBlock.ShowOnHUD">
            <summary>
            Represent terminal gui toggle `Show On HUD`. Gets or sets its value
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTerminalBlock.ShowInTerminal">
            <summary>
            Represent terminal gui toggle `Show block in terminal`. Gets or sets its value
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTerminalBlock.ShowInToolbarConfig">
            <summary>
            Represent terminal gui toggle `Show in toolbar config`. Gets or sets its value
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.GetActions(System.Collections.Generic.List{Sandbox.ModAPI.Interfaces.ITerminalAction},System.Func{Sandbox.ModAPI.Interfaces.ITerminalAction,System.Boolean})">
            <summary>
            Get all terminal actions available for block
            </summary>
            <param name="resultList">Buffer list, results would be added here. Can be null if <param ref="collect"/> always returns false</param>
            <param name="collect">Filter function, if function is null or returns true, terminal action would be added to <param ref="resultList"/></param>
            <seealso cref="T:Sandbox.ModAPI.Interfaces.ITerminalAction"/>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.SearchActionsOfName(System.String,System.Collections.Generic.List{Sandbox.ModAPI.Interfaces.ITerminalAction},System.Func{Sandbox.ModAPI.Interfaces.ITerminalAction,System.Boolean})">
            <summary>
            Get all terminal actions available for block.
            NOTE: First called `<param ref="collect"/>` and then `<param ref="name"/>` check
            </summary>
            <param name="name">Searches for terminal action with this name</param>
            <param name="resultList">Buffer list, results would be added here. Can be null if <param ref="collect"/> always returns false</param>
            <param name="collect">Filter function, if function is null or returns true, terminal action would be added to <param ref="resultList"/></param>
            <seealso cref="T:Sandbox.ModAPI.Interfaces.ITerminalAction"/>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.GetActionWithName(System.String)">
            <summary>
            Get first found terminal action with name
            </summary>
            <param name="name">Searches for terminal action with this name</param>
            <returns>Found terminal action or null</returns>
            <seealso cref="T:Sandbox.ModAPI.Interfaces.ITerminalAction"/>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.GetProperty(System.String)">
            <summary>
            Finds terminal property with provided id
            </summary>
            <param name="id">Terminal id</param>
            <returns>Found terminal property or null</returns>
            <seealso cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty"/>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.GetProperties(System.Collections.Generic.List{Sandbox.ModAPI.Interfaces.ITerminalProperty},System.Func{Sandbox.ModAPI.Interfaces.ITerminalProperty,System.Boolean})">
            <summary>
            Get all terminal actions available for block.
            </summary>
            <param name="resultList">Buffer list, results would be added here. Can be null if <param ref="collect"/> always returns false</param>
            <param name="collect">Filter function, if function is null or returns true, terminal property would be added to <param ref="resultList"/></param>
            <seealso cref="T:Sandbox.ModAPI.Interfaces.ITerminalAction"/>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTerminalBlock.ShowInInventory">
            <summary>
            Represent terminal gui toggle `Show block in Inventory Screen`. Gets or sets its value
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.IsSameConstructAs(Sandbox.ModAPI.Ingame.IMyTerminalBlock)">
            <summary>
            <para>
            Determines whether this block is <see cref="F:VRage.Game.ModAPI.GridLinkTypeEnum.Mechanical"/> connected to the other. This is any block connected
            with rotors or pistons or other mechanical devices, but not things like connectors. This will in most
            cases constitute your complete construct.
            </para>
            <para>
            Be aware that using merge blocks combines grids into one, so this function will not filter out grids
            connected that way. Also be aware that detaching the heads of pistons and rotors will cause this
            connection to change.
            </para>
            </summary>
            <param name="other">Other block</param>
            <returns>True if blocks are on same grid, or has <see cref="F:VRage.Game.ModAPI.GridLinkTypeEnum.Mechanical"/> linking</returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.TerminalBlockExtentions">
            <summary>
            Class having some sugar extensions.
            Written by Kalvin Osborne, AKA Night Lone. 
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalBlockExtentions.GetId(Sandbox.ModAPI.Ingame.IMyTerminalBlock)">
            <summary>
            Get EntityId of block
            </summary>
            <param name="block">Target block</param>
            <returns>EntityId</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalBlockExtentions.ApplyAction(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Finds action by <see cref="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.GetActionWithName(System.String)"/> and calls <see cref="M:Sandbox.ModAPI.Interfaces.ITerminalAction.Apply(VRage.Game.ModAPI.Ingame.IMyCubeBlock)"/>
            </summary>
            <param name="block">To apply action on</param>
            <param name="actionName">Name of action</param>
            <exception cref="T:System.NullReferenceException">If action not found</exception>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalBlockExtentions.ApplyAction(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String,System.Collections.Generic.List{Sandbox.ModAPI.Ingame.TerminalActionParameter})">
            <summary>
            Finds action by <see cref="M:Sandbox.ModAPI.Ingame.IMyTerminalBlock.GetActionWithName(System.String)"/> and calls <see cref="M:Sandbox.ModAPI.Interfaces.ITerminalAction.Apply(VRage.Game.ModAPI.Ingame.IMyCubeBlock,VRage.Collections.ListReader{Sandbox.ModAPI.Ingame.TerminalActionParameter})"/>
            </summary>
            <param name="block">To apply action on</param>
            <param name="actionName">Name of action</param>
            <param name="parameters">Parameters for terminal action function call</param>
            <exception cref="T:System.NullReferenceException">If action not found</exception>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalBlockExtentions.HasAction(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Searches for terminal action with name
            </summary>
            <param name="block">Terminal block which should have action</param>
            <param name="actionName">Name of action</param>
            <returns>True if terminal action found</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalBlockExtentions.HasInventory(Sandbox.ModAPI.Ingame.IMyTerminalBlock)">
            <summary>
            Obsolete
            </summary>
            <param name="block">Obsolete</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalBlockExtentions.GetInventory(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.Int32)">
            <summary>
            Obsolete
            </summary>
            <param name="block">obsolete</param>
            <param name="index">obsolete</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalBlockExtentions.GetInventoryCount(Sandbox.ModAPI.Ingame.IMyTerminalBlock)">
            <summary>
            Obsolete
            </summary>
            <param name="block">Obsolete</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalBlockExtentions.GetUseConveyorSystem(Sandbox.ModAPI.Ingame.IMyTerminalBlock)">
            <summary>
            Obsolete
            </summary>
            <param name="block">Obsolete</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalBlockExtentions.SetUseConveyorSystem(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.Boolean)">
            <summary>
            Obsolete
            </summary>
            <param name="block">Obsolete</param>
            <param name="use">Obsolete</param>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyTextPanel">
            <summary>
            Describes LCD block (mods interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.WritePublicTitle(System.String,System.Boolean)">
            <summary>
            Writes LCD popup dialog title
            If somebody opened LCD text in popup dialog, text can no longer be added.
            </summary>
            <param name="value"></param>
            <param name="append">If true, appends, else replaces text with `<paramref name="value"/>`</param>
            <returns>False is if somebody currently has opened LCD text in popup dialog, true in other cases</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.GetPublicTitle">
            <summary>
            Gets popup dialog title
            </summary>
            <returns>Public title</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.WritePrivateText(System.String,System.Boolean)">
            <summary>
            Obsolete
            </summary>
            <param name="value">Obsolete</param>
            <param name="append">Obsolete</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.GetPrivateText">
            <summary>
            Obsolete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.WritePrivateTitle(System.String,System.Boolean)">
            <summary>
            Obsolete
            </summary>
            <param name="value">Obsolete</param>
            <param name="append">Obsolete</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.GetPrivateTitle">
            <summary>
            Obsolete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.ShowPrivateTextOnScreen">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.WritePublicText(System.String,System.Boolean)">
            <summary>
            Obsolete
            </summary>
            <param name="value">Obsolete</param>
            <param name="append">Obsolete</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.GetPublicText">
            <summary>
            Obsolete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.WritePublicText(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Obsolete
            </summary>
            <param name="value">Obsolete</param>
            <param name="append">Obsolete</param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.ReadPublicText(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Obsolete
            </summary>
            <param name="buffer">Obsolete</param>
            <param name="append">Obsolete</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.ShowPublicTextOnScreen">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.ShowTextureOnScreen">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.SetShowOnScreen(VRage.Game.GUI.TextPanel.ShowTextOnScreenFlag)">
            <summary>
            Obsolete
            </summary>
            <param name="set">Obsolete</param>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextPanel.ShowOnScreen">
            <summary>
            Indicates what should be shown on the screen, none being an image.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextPanel.ShowText">
            <summary>
            Returns true if the ShowOnScreen flag is set to either PUBLIC or PRIVATE
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyTextSurface">
            <summary>
            Describes one of block LCDs where you can write text or draw things (PB scripting interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.WriteText(System.String,System.Boolean)">
            <summary>
            Writes text to surface.
            If somebody opened LCD text in popup dialog, text can no longer be added to the surface.
            Resulting text must is capped with 100000 symbols
            </summary>
            <param name="value">Text to append</param>
            <param name="append">If true, appends, else replaces text with `<paramref name="value"/>`</param>
            <returns>True if text was added, or replaced. False if somebody was looking at lcd</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.GetText">
            <summary>
            Gets current text that is written on surface. Allocates memory (StringBuilder.ToString())! This method doesn't allocate memory <see cref="M:Sandbox.ModAPI.Ingame.IMyTextSurface.ReadText(System.Text.StringBuilder,System.Boolean)"/>
            </summary>
            <returns>Current text</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.WriteText(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Writes text to surface.
            If somebody opened LCD text in popup dialog, text can no longer be added to the surface.
            Resulting text must is capped with 100000 symbols
            </summary>
            <param name="value">Text to append</param>
            <param name="append">If true, appends, else replaces text with `<paramref name="value"/>`</param>
            <returns>True if text was added, or replaced. False if somebody was looking at lcd</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.ReadText(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Gets current text that is written on surface. 
            </summary>
            <param name="buffer">Where to write text</param>
            <param name="append">If true, text would be appended, else buffer would be cleared before text append</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.AddImageToSelection(System.String,System.Boolean)">
            <summary>
            Adds image to list of shown images.
            You can get image ids by <see cref="M:Sandbox.ModAPI.Ingame.IMyTextSurface.GetSelectedImages(System.Collections.Generic.List{System.String})"/>
            </summary>
            <param name="id">Id of image</param>
            <param name="checkExistence">If true, image can't be added twice</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.AddImagesToSelection(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Adds image to list of shown images.
            You can get image ids by <see cref="M:Sandbox.ModAPI.Ingame.IMyTextSurface.GetSelectedImages(System.Collections.Generic.List{System.String})"/>
            </summary>
            <param name="ids">Ids of image</param>
            <param name="checkExistence">If true, image can't be added twice</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.RemoveImageFromSelection(System.String,System.Boolean)">
            <summary>
            Removes image from shown images.
            </summary>
            <param name="id">Id of image</param>
            <param name="removeDuplicates"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.RemoveImagesFromSelection(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Removes images from shown images.
            </summary>
            <param name="ids">Images ids</param>
            <param name="removeDuplicates">If true, would remove all images with provided ids</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.ClearImagesFromSelection">
            <summary>
            Removes images from shown images. 
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.GetSelectedImages(System.Collections.Generic.List{System.String})">
            <summary>
            Outputs the selected image ids to the specified list.
            
            NOTE: List is not cleared internally.
            </summary>
            <param name="output">Image id's would be written into this array</param>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.CurrentlyShownImage">
            <summary>
            Gets image that is currently shown on the screen.
            
            Returns NULL if there are no images selected OR the screen is in text mode.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.FontSize">
            <summary>
            Gets or sets font size
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.FontColor">
            <summary>
            Gets or sets font color
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.BackgroundColor">
            <summary>
            Gets or sets background color
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.BackgroundAlpha">
            <summary>
            Value for offscreen texture alpha channel
            - for PBR material it is metalness (should be 0)
            - for transparent texture it is opacity
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.ChangeInterval">
            <summary>
            Gets or sets the change interval for selected textures
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.Font">
            <summary>
            Gets or sets the font
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.GetFonts(System.Collections.Generic.List{System.String})">
            <summary>
            Gets a list of available fonts
            </summary>
            <param name="fonts"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.GetSprites(System.Collections.Generic.List{System.String})">
            <summary>
            Gets a list of available sprites
            </summary>
            <param name="sprites">Buffer array that would be filled with available sprites</param>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.Alignment">
            <summary>
            How should the text be aligned
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.GetScripts(System.Collections.Generic.List{System.String})">
            <summary>
            Gets a list of available scripts
            </summary>
            <param name="scripts"></param>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.Script">
            <summary>
            Currently running script
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.ContentType">
            <summary>
            Type of content to be displayed on the screen.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.SurfaceSize">
            <summary>
            Gets size of the drawing surface.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.TextureSize">
            <summary>
            Gets size of the texture the drawing surface is rendered to.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.DrawFrame">
            <summary>
            Creates a new draw frame where you can add sprites to be rendered.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.PreserveAspectRatio">
            <summary>
            Gets or sets preserve aspect ratio of images.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.TextPadding">
            <summary>
            Gets or sets text padding from all sides of the panel.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.ScriptBackgroundColor">
            <summary>
            Gets or sets background color used for scripts.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.ScriptForegroundColor">
            <summary>
            Gets or sets foreground color used for scripts.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurface.MeasureStringInPixels(System.Text.StringBuilder,System.String,System.Single)">
            <summary>
            Calculates how many pixels a string of a given font and scale will take up.
            </summary>
            <param name="text">Text to measure</param>
            <param name="font">Text font to measure</param>
            <param name="scale">Text scale to measure</param>
            <returns>Width and Height of text with specified text, font and scale</returns>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.Name">
            <summary>
            Gets identifier name of this surface.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurface.DisplayName">
            <summary>
            Get localized name of this surface.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyTextSurfaceProvider">
            <summary>
            Describes block, that has at least 1 text surface (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurfaceProvider.UseGenericLcd">
            <summary>
            Whether generic LCD terminal controls should be created
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextSurfaceProvider.SurfaceCount">
            <summary>
            Get surfaces count
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextSurfaceProvider.GetSurface(System.Int32)">
            <summary>
            Get surface by index
            </summary>
            <param name="index"></param>
            <returns>TextSurface if index in [0..SurfaceCount-1] and null if out of bounds</returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyThrust">
            <summary>
            Describes assembler block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyThrust.ThrustOverride">
            <summary>
            Gets or sets the override thrust amount, in Newtons (N)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyThrust.ThrustOverridePercentage">
            <summary>
            Gets or sets the thrust override as a percentage between 0 and 1
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyThrust.MaxThrust">
            <summary>
            Gets the maximum thrust amount, in Newtons (N)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyThrust.MaxEffectiveThrust">
            <summary>
            Gets the maximum effective thrust amount, in Newtons (N)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyThrust.CurrentThrust">
            <summary>
            Gets the current thrust amount, in Newtons (N)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyThrust.GridThrustDirection">
            <summary>
            Gets the direction of thrust, relative to ship controller (cockpit).
            </summary>
            <remarks>
            For example, a value of <see cref="F:VRageMath.Vector3I.Forward">VRageMath.Vector3I.Forward</see> means the thruster will move the grid along the grid's forward direction.
            A value of Vector3D.Zero means direction is unknown (no cockpit available).
            </remarks>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyUpgradableBlock">
            <summary>
            Describes block, which has upgrade effects (PB scripting interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyUpgradableBlock.GetUpgrades(System.Collections.Generic.Dictionary{System.String,System.Single}@)">
            <summary>
            Get list of upgrades. Read only.
            </summary>
            <param name="upgrades">String - upgrade type, float - effect value as float (1 = 100%)</param>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyUpgradableBlock.UpgradeCount">
            <summary>
            Gets number of upgrades applied
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyUpgradeModule">
            <summary>
            Describes upgrade module block (PB scripting interface)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyUpgradeModule.GetUpgradeList(System.Collections.Generic.List{VRage.Game.ObjectBuilders.Definitions.MyUpgradeModuleInfo}@)">
            <summary>
            Gets list of upgrades from this block, see <see cref='T:VRage.Game.ObjectBuilders.Definitions.MyUpgradeModuleInfo'>MyUpgradeModuleInfo</see> for details
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyUpgradeModule.UpgradeCount">
            <summary>
            Gets number of upgrade effects this block has
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyUpgradeModule.Connections">
            <summary>
            Gets number of blocks this block is connected to
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyUserControllableGun">
            <summary>
            Describes gun block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyUserControllableGun.IsShooting">
            <summary>
            Gets whether block is shooting
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyUserControllableGun.Shoot">
            <summary>
            Represents terminal gui toggle element "Shoot". Not same as <see cref="P:Sandbox.ModAPI.Ingame.IMyUserControllableGun.IsShooting"/>
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyUserControllableGun.ShootOnce">
            <summary>
            Triggers a single shot.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyWarhead">
            <summary>
            Describes Warhead block (PB scripting interface)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyWarhead.IsCountingDown">
            <summary>
            Gets whether this warhead block is counting down
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyWarhead.DetonationTime">
            <summary>
            Gets actual detonation time [s]
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyWarhead.StartCountdown">
            <summary>
            Start the countdown
            </summary>
            <returns>true if countdown was started, false if countdown can not start (block not functional) or countdown already running</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyWarhead.StopCountdown">
            <summary>
            Stops the countdown
            </summary>
            <returns>true if countdown was stopped, false if countdown can not stop (block not functional) or countdown is not running</returns>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyWarhead.IsArmed">
            <summary>
            Gets or sets whether this warhead block is armed
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyWarhead.Detonate">
            <summary>
            Detonates the warhead
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyWheel">
            <summary>
            Describes wheel block (PB scripting interface)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyDetectedEntityType">
            <summary>
            Describes detected entity type
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.SmallGrid">
            <summary>
            Small grid
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.LargeGrid">
            <summary>
            Large grid
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.CharacterHuman">
            <summary>
            Character human
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.CharacterOther">
            <summary>
            Character other
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.FloatingObject">
            <summary>
            Floating object
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.Asteroid">
            <summary>
            Asteroid
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.Planet">
            <summary>
            Planet
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.Meteor">
            <summary>
            Meteor
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityType.Missile">
            <summary>
            Missile
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo">
            <summary>
            Describes detected entity info
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.#ctor(System.Int64,System.String,Sandbox.ModAPI.Ingame.MyDetectedEntityType,System.Nullable{VRageMath.Vector3D},VRageMath.MatrixD,VRageMath.Vector3,VRage.Game.MyRelationsBetweenPlayerAndBlock,VRageMath.BoundingBoxD,System.Int64)">
            <summary>
            Implements MyDetectedEntityInfo constructor
            </summary>
            <param name="entityId">entity id</param>
            <param name="name">name</param>
            <param name="type">type</param>
            <param name="hitPosition">hit position</param>
            <param name="orientation">orientation</param>
            <param name="velocity">velocity</param>
            <param name="relationship">relationship</param>
            <param name="boundingBox">bounding box</param>
            <param name="timeStamp">time stamp</param>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.EntityId">
            <summary>
            The entity's EntityId
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.Name">
            <summary>
            The entity's display name if it is friendly, or a generic descriptor if it is not
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.Type">
            <summary>
            Enum describing the type of entity
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.HitPosition">
            <summary>
            Position where the raycast hit the entity. (can be null if the sensor didn't use a raycast)
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.Orientation">
            <summary>
            The entity's absolute orientation at the time it was detected
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.Velocity">
            <summary>
            The entity's absolute velocity at the time it was detected
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.Relationship">
            <summary>
            Relationship between the entity and the owner of the sensor
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.BoundingBox">
            <summary>
            The entity's world-aligned bounding box
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.TimeStamp">
            <summary>
            Time when the entity was detected. This field counts milliseconds, compensated for simspeed
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.Position">
            <summary>
            The entity's position (center of the Bounding Box)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyDetectedEntityInfo.IsEmpty">
            <summary>
            Determines if this structure is empty; meaning it does not contain any meaningful data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyGridProgram">
            <summary>
                All programmable block scripts derive from this class, meaning that all properties in this
                class are directly available for use in your scripts.
                If you use Visual Studio or other external editors to write your scripts, you can derive
                directly from this class and have a compatible script template.
            </summary>
            <example>
                <code>
            public void Main()
            {
                // Print out the time elapsed since the currently running programmable block was run
                // the last time.
                Echo(Me.CustomName + " was last run " + Runtime.TimeSinceLastRun.TotalSeconds + " seconds ago.");
            }
            </code>
            </example>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.MyGridProgram.#ctor">
            <summary>
            Implements MyGridProgram constructor
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.GridTerminalSystem">
            <summary>
                Provides access to the grid terminal system as viewed from this programmable block.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.Me">
            <summary>
                Gets a reference to the currently running programmable block.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.Runtime">
            <summary>
            Gets runtime information for the running grid program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.Storage">
            <summary>
                Allows you to store data between game sessions.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.Echo">
            <summary>
                Prints out text onto the currently running programmable block's detail info area.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.IGC">
            <summary>
            Gets IGC instance
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyStoreQueryItem">
            <summary>
            Describes store query item
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyStoreQueryItem.ItemId">
            <summary>
            Gets definition id of the item
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyStoreQueryItem.Amount">
            <summary>
            Gets amount for buy/sell
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyStoreQueryItem.PricePerUnit">
            <summary>
            Gets price per unit
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyStoreQueryItem.Id">
            <summary>
            Id of the store item. Ex. Needed for removing item from store.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyTerminalAccessScope">
            <summary>
            Determines how <see cref="M:Sandbox.ModAPI.Ingame.IMyGridTerminalSystem.CanAccess(Sandbox.ModAPI.Ingame.IMyTerminalBlock,Sandbox.ModAPI.Ingame.MyTerminalAccessScope)"/> limits its
            access check.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyTerminalAccessScope.All">
            <summary>
            Checks for access over the entire grid terminal system, no matter how the block is connected.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyTerminalAccessScope.Construct">
            <summary>
            Checks for access only within the current construct. This is any block connected
            with rotors or pistons or other mechanical devices, but not things like connectors. This will in most
            cases constitute your complete construct. Be aware that using merge blocks combines grids into one, so this function
            will not filter out grids connected that way.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.MyTerminalAccessScope.Grid">
            <summary>
            Checks for access only for blocks on the same grid as the programmable block.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.PistonStatus">
            <summary>
            Describes the current status of the piston.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.PistonStatus.Stopped">
            <summary>
            The piston velocity is 0 (stationary).
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.PistonStatus.Extending">
            <summary>
            The piston is being extended (moving).
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.PistonStatus.Extended">
            <summary>
            The piston is in its extended position (stationary).
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.PistonStatus.Retracting">
            <summary>
            The piston is being retracted (moving).
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.PistonStatus.Retracted">
            <summary>
            The piston is in its retracted position (stationary).
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.TerminalActionParameter">
            <summary>
            Implements terminal action parameter
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.TerminalActionParameter.Empty">
            <summary>
            Gets an empty parameter.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalActionParameter.Deserialize(System.String,System.TypeCode)">
            <summary>
            Creates a <see cref="T:Sandbox.ModAPI.Ingame.TerminalActionParameter"/> from a serialized value in a string and a type code.
            </summary>
            <param name="serializedValue"></param>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalActionParameter.Get(System.Object)">
            <summary>
            Creates a <see cref="T:Sandbox.ModAPI.Ingame.TerminalActionParameter"/> from the given value.
            </summary>        
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.TerminalActionParameter.TypeCode">
            <summary>
            Gets the type code
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.TerminalActionParameter.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.TerminalActionParameter.IsEmpty">
            <summary>
            Gets whether this action is empty
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalActionParameter.GetObjectBuilder">
            <summary>
            Gets object builder for the action
            </summary>
            <returns>instance of object builder</returns>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.ITerminalAction">
            <summary>
            Describes terminal action interface
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.ITerminalAction.Id">
            <summary>
            Gets the id of the action
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.ITerminalAction.Icon">
            <summary>
            Gets the icon of the action
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.ITerminalAction.Name">
            <summary>
            Gets the name of the action
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalAction.Apply(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Applies action on the block
            </summary>
            <param name="block">block instance</param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalAction.Apply(VRage.Game.ModAPI.Ingame.IMyCubeBlock,VRage.Collections.ListReader{Sandbox.ModAPI.Ingame.TerminalActionParameter})">
            <summary>
            Applies action on the block with specific action parameters
            </summary>
            <param name="block">block</param>
            <param name="terminalActionParameters">action parameters</param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalAction.WriteValue(VRage.Game.ModAPI.Ingame.IMyCubeBlock,System.Text.StringBuilder)">
            <summary>
            Writes value for the action
            </summary>
            <param name="block">block</param>
            <param name="appendTo">content</param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalAction.IsEnabled(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Checks if action is enabled for specific block
            </summary>
            <param name="block">block</param>
            <returns>true if enabled</returns>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.ITerminalProperty">
            <summary>
            Terminal block property definition
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.Id">
            <summary>
            Property Id (value name)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName">
            <summary>
            Property type (bool - <see cref="T:System.Boolean"/>, float - <see cref="T:System.Single"/>, color - <see cref="T:VRageMath.Color"/>)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1">
            <summary>
            Terminal block property access
            </summary>
            <typeparam name="TValue">Property type (<see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>)</typeparam>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetValue(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Retrieve property value
            </summary>
            <param name="block">block reference</param>
            <returns>value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.SetValue(VRage.Game.ModAPI.Ingame.IMyCubeBlock,`0)">
            <summary>
            Set property value
            </summary>
            <param name="block">block reference</param>
            <param name="value">value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetDefaultValue(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Default value of property (if value is not set, or value from block definition)
            </summary>
            <param name="block">block reference</param>
            <returns>value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetMininum(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Minimum value of property (value from block definition) - this function is obsolete, because it contains typo in name, use <see cref="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetMinimum(VRage.Game.ModAPI.Ingame.IMyCubeBlock)"/>
            </summary>
            <param name="block">block reference</param>
            <returns>value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetMinimum(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Minimum value of property (value from block definition)
            </summary>
            <param name="block">block reference</param>
            <returns>value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetMaximum(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Maximum value of property (value from block definition)
            </summary>
            <param name="block">block reference</param>
            <returns>value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions">
            <summary>
            Terminal block extension for property access
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.As``1(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Property type cast
            </summary>
            <typeparam name="TValue">value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>reference to <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> value of specified type</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.Cast``1(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Property type cast
            </summary>
            <typeparam name="TValue">value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>reference to <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> value of specified type</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.Is``1(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Check property type
            </summary>
            <typeparam name="TValue">value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>true if type matches</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.AsFloat(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Property type cast
            </summary>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>reference to <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> value of specified type (float)</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.AsColor(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Property type cast
            </summary>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>reference to <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> value of specified type (Color)</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.AsBool(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Property type cast
            </summary>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>reference to <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> value of specified type (bool)</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetValueFloat(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns value of specified property
            </summary>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as float</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.SetValueFloat(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String,System.Single)">
            <summary>
            Set float value of property
            </summary>        
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetValueBool(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns value of specified property
            </summary>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as bool</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.SetValueBool(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String,System.Boolean)">
            <summary>
            Set bool value of property
            </summary>        
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetValueColor(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns value of specified property
            </summary>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as Color</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.SetValueColor(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String,VRageMath.Color)">
            <summary>
            Set bool value of property
            </summary>        
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetValue``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns value of specified property as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>
            </summary>        
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetDefaultValue``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns default value of specified property as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>
            </summary>
            <typeparam name="T">required value type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetMininum``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns minimum value of specified property as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/> - this call is obsolete due typo in name, use <see cref="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetMinimum``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)"/>
            </summary>
            <typeparam name="T">required value type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetMinimum``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns minimum value of specified property as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>
            </summary>
            <typeparam name="T">required value type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetMaximum``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns maximum value of specified property as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>
            </summary>
            <typeparam name="T">required value type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.SetValue``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String,``0)">
            <summary>
            Set value of property with type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>
            </summary>
            <typeparam name="T"><see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <param name="value">value to set</param>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction">
            <summary>
            This is an interface wrapper for terminal actions that appear on a toolbar.  An instance of this interface is created via 
            MyAPIGateway.TerminalControls.CreateAction.  Once created, you may modify various fields to control how the action behaves.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction.Enabled">
            <summary>
            Allows you to set if this action is enabled or disabled
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction.InvalidToolbarTypes">
            <summary>
            Allows you to set which toolbar type this action is invalid for.  Adding to this means this action may not be added to that toolbar type.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction.ValidForGroups">
            <summary>
            Allows you to set if this action is valid in groups
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction.Name">
            <summary>
            Allows you to set the name of the Action
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction.Icon">
            <summary>
            Allows you to set the Icon of this action.  It's a link to an icon texture.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction.Action">
            <summary>
            This is the action taken when an action is performed.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalAction.Writer">
            <summary>
            This allows you to set the "Icon Text" of an action (the text that appears under the icon in the toolbar)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControl">
            <summary>
            This is the base terminal control interface.  All controls implement this.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControl.Id">
            <summary>
            Identifier of control
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControl.Enabled">
            <summary>
            Allows you to set if the control is enabled
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControl.Visible">
            <summary>
            Allows you to set if the control is visible
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControl.SupportsMultipleBlocks">
            <summary>
            Allows you to set if the control is visible when the block is selected as a group
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControl.RedrawControl">
            <summary>
            Recreates the control GUI.  This allows you to update the Title of some controls.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControl.UpdateVisual">
            <summary>
            This updates a control that is currently displayed, allowing you to refresh it's state
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlButton">
            <summary>
            This is a control button.  When a button is clicked an action is performed.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlButton.Action">
            <summary>
            The action taken when a button is clicked
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlCheckbox">
            <summary>
            This is a checkbox.  A label appears and a box appears next to it
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlCheckbox.OnText">
            <summary>
            The "on" label text
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlCheckbox.OffText">
            <summary>
            The "off" label text
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlColor">
            <summary>
            This is a color control.  This terminal controls allows you to select colors. 
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlCombobox">
            <summary>
            This is a combobox control.  It is a field that gives a drop down list that contains options that you can select.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlCombobox.ComboBoxContent">
            <summary>
            This allows you to set the content of the combo box itself.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlLabel">
            <summary>
            This is a simple label control.  
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlLabel.Label">
            <summary>
            The text on the label
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlListbox">
            <summary>
            This is a list box.  It contains a list of items that a user can select.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlListbox.Multiselect">
            <summary>
            This allows you to enable/disable multiple item selection
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlListbox.VisibleRowsCount">
            <summary>
            This allows you to set how many rows are visible in the list box.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlListbox.ListContent">
            <summary>
            This is triggered when you need to populate the list with list items.  The first list is the items in the list box, and the second list is 
            the selected items in the list.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlListbox.ItemSelected">
            <summary>
            This is triggered when an item is selected.  Can contain more than one item if Multiselect is true.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlOnOffSwitch">
            <summary>
            This is an on / off switch or toggle button.  It gives two options that a user can toggled between.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlOnOffSwitch.OnText">
            <summary>
            The label for the "on" switch
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlOnOffSwitch.OffText">
            <summary>
            The label for the "off" switch
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlProperty`1">
            <summary>
            This is a control property.  This is use to set properties on a block that can be referenced in the ProgrammableBlock.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlSeparator">
            <summary>
            This is a simple line separator used to separate controls in a visible manner.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlSlider">
            <summary>
            This is a value slider.  A slider can be moved by a user and a value selected.  
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlSlider.SetLimits(System.Single,System.Single)">
            <summary>
            Allows you to set the upper and lower limits of the slider
            </summary>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlSlider.SetLogLimits(System.Single,System.Single)">
            <summary>
            Allows you to set the upper and lower limits of the slider, interpolating on a logarithmic scale
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlSlider.SetDualLogLimits(System.Single,System.Single,System.Single)">
            <summary>
            Allows you to set the upper and lower limits of the slider, interpolating on a logarithmic scale at both ends
            </summary>
            <param name="absMin"></param>
            <param name="absMax"></param>
            <param name="centerBand"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlSlider.SetLimits(System.Func{Sandbox.ModAPI.IMyTerminalBlock,System.Single},System.Func{Sandbox.ModAPI.IMyTerminalBlock,System.Single})">
            <summary>
            Allows you to set the upper and lower limits of the slider with delegates
            </summary>
            <param name="minGetter"></param>
            <param name="maxGetter"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlSlider.SetLogLimits(System.Func{Sandbox.ModAPI.IMyTerminalBlock,System.Single},System.Func{Sandbox.ModAPI.IMyTerminalBlock,System.Single})">
            <summary>
            Allows you to set the upper and lower limits of the slider with delegates, interpolating on a logarithmic scale
            </summary>
            <param name="minGetter"></param>
            <param name="maxGetter"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlSlider.SetDualLogLimits(System.Func{Sandbox.ModAPI.IMyTerminalBlock,System.Single},System.Func{Sandbox.ModAPI.IMyTerminalBlock,System.Single},System.Single)">
            <summary>
            Allows you to set the upper and lower limits of the slider with delegates, interpolating on a logarithmic scale at both ends
            </summary>
            <param name="minGetter"></param>
            <param name="maxGetter"></param>
            <param name="centerBand"></param>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlSlider.Writer">
            <summary>
            This is triggered when a slider value is modified.  Appending to the string builder allows you to modify the text that is displayed along
            side the slider when it updates.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlTextbox">
            <summary>
            This is a textbox where a user can enter values into.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlTitleTooltip">
            <summary>
            This is a base interface for other interfaces.  Almost all controls implement this, and allows you to set the label (Title) of the control and also
            the tooltip that appears when hovering over the control.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlTitleTooltip.Title">
            <summary>
            Allows you to get or set the Label that appears on the control
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalControlTitleTooltip.Tooltip">
            <summary>
            Allows you to get or set the tooltip that appears when you hover over the control
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalValueControl`1">
            <summary>
            This is a value control interface that a few controls implement.  When a value changes, the Setter action is performed.  When a value is queried the Getter action
            is performed.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalValueControl`1.Getter">
            <summary>
            This is triggered when the value of the control is required.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.Terminal.IMyTerminalValueControl`1.Setter">
            <summary>
            This is triggered when the value of the control is set by the user.  Depending on the control, this may be called a lot.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.MyAPIGateway">
            <summary>
            This is entry point for entire scripting possibilities in game
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.GuiControlCreated">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyAPIGateway.Session">
            <summary>
            IMySession represents session object e.g. current world and its settings
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyAPIGateway.Entities">
            <summary>
            IMyEntities represents all objects that currently in world 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Players">
            <summary>
            IMyPlayerCollection contains all players that are in world 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.CubeBuilder">
            <summary>
            IMyCubeBuilder represents building hand 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.TerminalActionsHelper">
            <summary>
            IMyTerminalActionsHelper is helper for terminal actions and allows to access terminal 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.TerminalControls">
            <summary>
            IMyTerminalControls allows access to adding and removing controls from a block's terminal screen
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Utilities">
            <summary>
            IMyUtilities contains mainly I/O, serialization, mod interaction functions
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Multiplayer">
            <summary>
            IMyMultiplayer  contains multiplayer related things
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Parallel">
            <summary>
            IMyParallelTask allows to run tasks on background threads 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Physics">
            <summary>
            IMyPhysics contains physics related things (CastRay, etc.)
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Gui">
            <summary>
            IMyGui exposes some useful values from the GUI systems
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.PrefabManager">
            <summary>
            Allows you spawn prefabs 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.IngameScripting">
            <summary>
            Provides mod access to control compilation of ingame scripts
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Input">
            <summary>
            IMyInput allows accessing direct input device states
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.ContractSystem">
            <summary>
            IMyContractSystem allows you add or edit contracts
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.GridGroups">
            <summary>
            Provides access to the Grid Group system
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Reflection">
            <summary>
            Allows you to use some reflection tools
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.SpectatorTools">
            <summary>
            Gives you access to spectator tools. 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Projectiles">
            <summary>
            Interface for controlling projectile behavior
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Missiles">
            <summary>
            Interface for controlling missiles
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.DLC">
            <summary>
            Provides access for checking installation state of DLCs, and if DLC required by a definition is present.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.MyAPIGateway.GetMessageBoxPointer(System.IntPtr@)">
            <summary>
            Obsolete
            </summary>
            <param name="pointer">Obsolete</param>
        </member>
        <member name="M:Sandbox.ModAPI.MyAPIGateway.Clean">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.MyAPIGateway.DoorBase(System.String)">
            <summary>
            Obsolete
            </summary>
            <param name="name">obsolete</param>
        </member>
        <member name="T:Sandbox.ModAPI.MyExplosionTypeEnum">
            <summary>
            Enum defining which sound and effect would be played on explosion trigger
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.MISSILE_EXPLOSION">
            <summary>
            Missile explosion
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.BOMB_EXPLOSION">
            <summary>
            Bomb explosion
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.AMMO_EXPLOSION">
            <summary>
            Ammo explosion
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.GRID_DEFORMATION">
            <summary>
            Grid deformation
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.GRID_DESTRUCTION">
            <summary>
            Grid destruction
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.WARHEAD_EXPLOSION_02">
            <summary>
            Warhead explosion 2
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.WARHEAD_EXPLOSION_15">
            <summary>
            Warhead explosion 15
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.WARHEAD_EXPLOSION_30">
            <summary>
            Warhead explosion 30
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.WARHEAD_EXPLOSION_50">
            <summary>
            Warhead explosion 50
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.CUSTOM">
            <summary>
            Custom particle effect
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyExplosionTypeEnum.ProjectileExplosion">
            <summary>
            Projectile explosion
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.MyProjectileHitInfo">
            <summary>
            Describes information projectile about projectile hit. (mods interface)
            You can change values 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.Damage">
            <summary>
            Damage that would 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.Impulse">
            <summary>
            Impulse, that would be applied to <see cref="F:Sandbox.ModAPI.MyProjectileHitInfo.HitEntity"/>
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.HitNormal">
            <summary>
            Hit normal
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.HitPosition">
            <summary>
            World coordinates of projectile hit
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.HitShapeKey">
            <summary>
            Used in <see cref="M:Sandbox.ModAPI.IMyProjectiles.GetSurfaceAndMaterial(VRage.ModAPI.IMyEntity,VRageMath.LineD@,VRageMath.Vector3D@,System.UInt32,Sandbox.ModAPI.MySurfaceImpactEnum@,VRage.Utils.MyStringHash@)"/>
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.HitEntity">
            <summary>
            Entity that was hitted by projectile
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.Velocity">
            <summary>
            Velocity of projectile before hit
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.HitMaterial">
            <summary>
            Material that hitted by projectile
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.HitVoxelMaterial">
            <summary>
            Voxel Material that hit by projectile
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.AddDecals">
            <summary>
            When it is false, decals wont be added (default = true)
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.AddHitIndicator">
            <summary>
            When it is false, player wont see hit indicator
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.AddHitParticles">
            <summary>
            When it is false, player wont see hit particles (default = true)
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.PlayHitSound">
            <summary>
            When it is false, player wont hear hit sound (default = true)
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyProjectileHitInfo.AddSZNotification">
            <summary>
            When it is false, player wont see safe zone notification (default = true)
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.MyProjectileHitInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:Sandbox.ModAPI.MyProjectileInfo">
            <summary>
            Implements read-only info about existing projectile
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.Index">
            <summary>
            Index of position in array. May be changed
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.Position">
            <summary>
            World position
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.Origin">
            <summary>
            Shoot position (World coordinates)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.Velocity">
            <summary>
            Current velocity
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.CachedGravity">
            <summary>
            Cached gravity, in position of bullet. (May be inaccurate)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.MaxTrajectory">
            <summary>
            Max travel distance
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.ProjectileAmmoDefinition">
            <summary>
            Gets Projectile Ammo Definition of type MyProjectileAmmoDefinition
            </summary>        
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.WeaponDefinition">
            <summary>
            Gets Weapon Definition of type MyWeaponDefinition
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.OwnerEntity">
            <summary>
            Rifle, block ...
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.OwnerEntityAbsolute">
            <summary>
            character, main ship cockpit,
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyProjectileInfo.OwningPlayer">
            <summary>
            Player SteamId or zero
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.MyProjectileInfo.#ctor(System.Int32,VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D,VRageMath.Vector3D,System.Single,VRage.Game.MyDefinitionBase,VRage.Game.MyDefinitionBase,VRage.ModAPI.IMyEntity,VRage.ModAPI.IMyEntity,System.UInt64)">
            <summary>
            Implements projectile info constructor
            </summary>
            <param name="index">index</param>
            <param name="position">position</param>
            <param name="origin">origin</param>
            <param name="velocity">velocity</param>
            <param name="cachedGravity">gravity vector</param>
            <param name="maxTrajectory">max trajectory</param>
            <param name="projectileAmmoDefinition">projectile ammo definition</param>
            <param name="weaponDefinition">weapon definition</param>
            <param name="ownerEntity">owner entity</param>
            <param name="ownerEntityAbsolute">top owner in case of grid hierarchy</param>
            <param name="owningPlayer">player owner</param>
        </member>
        <member name="T:Sandbox.ModAPI.MySurfaceImpactEnum">
            <summary>
            Enum describes which surface projectile hit
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MySurfaceImpactEnum.Metal">
            <summary>
            Metal
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MySurfaceImpactEnum.Destructible">
            <summary>
            Destructible
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MySurfaceImpactEnum.Indestructible">
            <summary>
            Indestructible
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MySurfaceImpactEnum.Character">
            <summary>
            Character
            </summary>
        </member>
    </members>
</doc>
